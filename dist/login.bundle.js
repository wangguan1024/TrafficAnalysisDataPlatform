!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=37)}({0:function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function s(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],o=0;o<n.length;o++){var i=n[o],c=e.base?i[0]+e.base:i[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var u=s(d),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(f)):a.push({identifier:d,updater:b(f,e),references:1}),r.push(d)}return r}function l(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var d,u=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function p(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var m=null,g=0;function b(n,e){var t,r,o;if(e.singleton){var i=g++;t=m||(m=l(e)),r=f.bind(null,t,i,!1),o=f.bind(null,t,i,!0)}else t=l(e),r=p.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=s(t[r]);a[o].references--}for(var i=c(n,e),l=0;l<t.length;l++){var d=s(t[l]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}t=i}}}},1:function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}var a,s,c;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},16:function(n,e,t){var r=t(0),o=t(17);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},17:function(n,e,t){var r=t(1),o=t(3),i=t(18),a=t(19);e=r(!1);var s=o(i),c=o(a);e.push([n.i,"* {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nhtml {\r\n    height: 100%;\r\n    font-size: 1vw;\r\n}\r\n\r\nheader {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 8%;\r\n    margin: 1% 0;\r\n    background-image: url("+s+");\r\n    background-size: 100%;\r\n    text-align: center;\r\n    color: deepskyblue;\r\n    font-size: 2.7rem;\r\n}\r\n\r\nbody {\r\n    background: url("+c+');\r\n    background-size: cover;\r\n    position: relative;\r\n}\r\n\r\nmain {\r\n    margin: 0 auto;\r\n    margin-left: 65%;\r\n    width: 400px;\r\n    height: 400px;\r\n    position: relative;\r\n    background-color: white;\r\n    opacity: 0.8;\r\n    border: 2px solid lightskyblue;\r\n    border-radius: 2px;\r\n}\r\n\r\n/* 登录方式切换按钮 */\r\n.signFlowTabs {\r\n    position: relative;\r\n    text-align: center;\r\n    top: 15px;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.signFlowTab {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border: none;\r\n    background-color: #fff;\r\n}\r\n\r\n.signFlowTab--active {\r\n    position: relative;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border: none;\r\n    background-color: #fff;\r\n    font-weight: 600;\r\n}\r\n\r\n.signFlowTab--active:after {\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -6px;\r\n    content: "";\r\n    width: 100%;\r\n    height: 3px;\r\n    background-color: #0084ff;\r\n}\r\n\r\n#loginByUsername {\r\n    margin-right: 30px;\r\n}\r\n\r\n/* 登录状态 */\r\n#statusDiv {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n\r\n/* 登录表单 */\r\n.loginForm {\r\n    position: relative;\r\n    margin-top: 60px;\r\n    margin-bottom: 25px;\r\n}\r\n\r\n#loginFormByPC {\r\n    display: none;\r\n}\r\n.inputDiv label {\r\n    display: inline-block;\r\n    width: 110px;\r\n    text-align: right;\r\n}\r\n.inputDiv {\r\n    margin-top: 15px;\r\n}\r\n#UPsubmitBtnDiv,\r\n#PCsubmitBtnDiv {\r\n    text-align: center;\r\n}\r\n#UPsubmitBtn,\r\n#PCsubmitBtn {\r\n    width: 270px;\r\n    height: 45px;\r\n    border-width: 0px;\r\n    border-radius: 3px;\r\n    background: #1e90ff;\r\n    cursor: pointer;\r\n    outline: none;\r\n    font-family: Microsoft YaHei;\r\n    color: white;\r\n    font-size: 17px;\r\n}\r\n\r\n/* 手机登录设置 */\r\n\r\n#code {\r\n    width: 80px;\r\n}\r\n\r\n#sendCode {\r\n    margin-left: 20px;\r\n    border: 1px solid darkgray;\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n',""]),n.exports=e},18:function(n,e,t){"use strict";t.r(e),e.default=t.p+"f6e8f51ae310964a10a748a5d4fd11cd.png"},19:function(n,e,t){"use strict";t.r(e),e.default=t.p+"dc2905990c8401283a56e6558cb023c6.jpg"},3:function(n,e,t){"use strict";n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},37:function(n,e,t){"use strict";t.r(e);t(16);!function(){const n=document.getElementById("loginByUsername"),e=document.getElementById("loginByPhone"),t=document.getElementById("loginFormByUP"),r=document.getElementById("loginFormByPC");function o(){t.style.display="block",r.style.display="none",n.className="signFlowTab--active",e.className="signFlowTab"}n.addEventListener("click",o),e.addEventListener("click",(function(){r.style.display="block",t.style.display="none",e.className="signFlowTab--active",n.className="signFlowTab"})),o()}(),function(){const n=document.getElementById("sendCode");let e=!0;function t(){let t=document.getElementById("phone").value.trim();if(/[0-9]{11}/.test(t)){if(e){e=!1,fetch("http://122.51.19.160:8080/sendVerifyCode?phone="+t).catch(n=>{console.log(n)}),n.setAttribute("disabled","disabled"),n.style.cursor="default",n.style.color="grey";let r=60,o=setInterval((function(){0===r&&(e=!0,r=60,n.innerHTML="发送验证码",n.removeAttribute("disabled"),n.style.cursor="pointer",n.style.color="black",clearInterval(o)),n.innerHTML=r+"s后重试",r--}),1e3)}}else{let n=document.getElementById("statusDiv");n.innerHTML="手机号码格式错误",n.setAttribute("class","alert alert-danger")}}n.addEventListener("click",t),n.addEventListener("keydown",(function(n){13===n.keyCode&&t()}))}(),function(){const n=document.getElementById("PCsubmitBtn"),e=document.getElementById("phone"),t=document.getElementById("code");function r(){let n=e.value.trim(),r=t.value.trim(),o={phone:n,code:Number(r)};fetch("http://122.51.19.160:8080/loginBypc",{method:"POST",body:JSON.stringify(o),headers:new Headers({"Content-Type":"application/json"})}).then(n=>n.json()).then(n=>{let e=document.getElementById("statusDiv");"success"===n.status?(e.innerHTML=n.data,e.setAttribute("class","alert alert-success"),window.location.href="./mainPage.html"):(e.innerHTML=n.data,e.setAttribute("class","alert alert-danger"))}).catch(n=>{console.log(n)})}function o(n){13===n.keyCode&&r()}n.addEventListener("click",r),n.addEventListener("keydown",o),e.addEventListener("keydown",o),t.addEventListener("keydown",o)}(),function(){const n=document.getElementById("UPsubmitBtn"),e=document.getElementById("username"),t=document.getElementById("password");function r(){let n=e.value.trim(),r=t.value.trim();if(0!=n.length&&0!=r.length){let e={username:n,password:r};fetch("http://122.51.19.160:8080/loginByup",{method:"POST",body:JSON.stringify(e),headers:new Headers({"Content-Type":"application/json"})}).then(n=>n.json()).then(n=>{let e=document.getElementById("statusDiv");"success"===n.status?(e.innerHTML=n.data,e.setAttribute("class","alert alert-success"),window.location.href="./mainPage.html"):(e.innerHTML=n.data,e.setAttribute("class","alert alert-danger"))}).catch(n=>{console.log(n)})}else statusDiv.innerHTML="账号或密码为空",statusDiv.setAttribute("class","alert alert-danger")}function o(n){13===n.keyCode&&r()}document.getElementById("rememberMe"),n.addEventListener("click",r),n.addEventListener("keydown",o),e.addEventListener("keydown",o),t.addEventListener("keydown",o)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,