!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=37)}({0:function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function s(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var i=e[o],c=n.base?i[0]+n.base:i[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var u=s(d),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(f)):a.push({identifier:d,updater:y(f,n),references:1}),r.push(d)}return r}function l(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var d,u=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function f(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function p(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,g=0;function y(e,n){var t,r,o;if(n.singleton){var i=g++;t=m||(m=l(n)),r=f.bind(null,t,i,!1),o=f.bind(null,t,i,!0)}else t=l(n),r=p.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=s(t[r]);a[o].references--}for(var i=c(e,n),l=0;l<t.length;l++){var d=s(t[l]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}t=i}}}},1:function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var a,s,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},16:function(e,n,t){var r=t(0),o=t(17);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},17:function(e,n,t){var r=t(1),o=t(3),i=t(18),a=t(19);n=r(!1);var s=o(i),c=o(a);n.push([e.i,"* {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nhtml {\r\n    height: 100%;\r\n    font-size: 1vw;\r\n}\r\n\r\nheader {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 8%;\r\n    margin: 1% 0;\r\n    background-image: url("+s+");\r\n    background-size: 100%;\r\n    text-align: center;\r\n    color: deepskyblue;\r\n    font-size: 2.7rem;\r\n}\r\n\r\nbody {\r\n    background: url("+c+');\r\n    background-size: cover;\r\n    position: relative;\r\n}\r\n\r\nmain {\r\n    margin: 0 auto;\r\n    margin-left: 65%;\r\n    width: 400px;\r\n    height: 400px;\r\n    position: relative;\r\n    background-color: white;\r\n    opacity: 0.8;\r\n    border: 2px solid lightskyblue;\r\n    border-radius: 2px;\r\n}\r\n\r\n/* 登录方式切换按钮 */\r\n.signFlowTabs {\r\n    position: relative;\r\n    text-align: center;\r\n    top: 15px;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.signFlowTab {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border: none;\r\n    background-color: #fff;\r\n}\r\n\r\n.signFlowTab--active {\r\n    position: relative;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border: none;\r\n    background-color: #fff;\r\n    font-weight: 600;\r\n}\r\n\r\n.signFlowTab--active:after {\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -6px;\r\n    content: "";\r\n    width: 100%;\r\n    height: 3px;\r\n    background-color: #0084ff;\r\n}\r\n\r\n#loginByUsername {\r\n    margin-right: 30px;\r\n}\r\n\r\n/* 登录状态 */\r\n#statusDiv {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n}\r\n\r\n/* 登录表单 */\r\n.loginForm {\r\n    position: relative;\r\n    margin-top: 60px;\r\n    margin-bottom: 25px;\r\n}\r\n\r\n#loginFormByPC {\r\n    display: none;\r\n}\r\n.inputDiv label {\r\n    display: inline-block;\r\n    width: 110px;\r\n    text-align: right;\r\n}\r\n.inputDiv {\r\n    margin-top: 15px;\r\n}\r\n#UPsubmitBtnDiv,\r\n#PCsubmitBtnDiv {\r\n    text-align: center;\r\n}\r\n#UPsubmitBtn,\r\n#PCsubmitBtn {\r\n    width: 40%;\r\n}\r\n\r\n/* 手机登录设置 */\r\n\r\n#code {\r\n    width: 80px;\r\n}\r\n\r\n#sendCode {\r\n    margin-left: 20px;\r\n    border: 1px solid darkgray;\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n',""]),e.exports=n},18:function(e,n,t){"use strict";t.r(n),n.default=t.p+"f6e8f51ae310964a10a748a5d4fd11cd.png"},19:function(e,n,t){"use strict";t.r(n),n.default=t.p+"dc2905990c8401283a56e6558cb023c6.jpg"},3:function(e,n,t){"use strict";e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},37:function(e,n,t){"use strict";t.r(n);t(16);!function(){const e=document.getElementById("loginByUsername"),n=document.getElementById("loginByPhone"),t=document.getElementById("loginFormByUP"),r=document.getElementById("loginFormByPC");function o(){t.style.display="block",r.style.display="none",e.className="signFlowTab--active",n.className="signFlowTab"}e.addEventListener("click",o),n.addEventListener("click",(function(){r.style.display="block",t.style.display="none",n.className="signFlowTab--active",e.className="signFlowTab"})),o()}(),function(){const e=document.getElementById("sendCode");let n=!0;function t(){let t=document.getElementById("phone").value.trim();if(/[0-9]{11}/.test(t)){if(n){n=!1,fetch("http://122.51.19.160:8080/sendVerifyCode?phone="+t).catch(e=>{console.log(e)}),e.setAttribute("disabled","disabled"),e.style.cursor="default",e.style.color="grey";let r=60,o=setInterval((function(){0===r&&(n=!0,r=60,e.innerHTML="发送验证码",e.removeAttribute("disabled"),e.style.cursor="pointer",e.style.color="black",clearInterval(o)),e.innerHTML=r+"s后重试",r--}),1e3)}}else{let e=document.getElementById("statusDiv");e.innerHTML="手机号码格式错误",e.setAttribute("class","alert alert-danger")}}e.addEventListener("click",t),e.addEventListener("keydown",(function(e){13===e.keyCode&&t()}))}(),function(){const e=document.getElementById("PCsubmitBtn"),n=document.getElementById("phone"),t=document.getElementById("code");function r(){let e=n.value.trim(),r=t.value.trim(),o={phone:e,code:Number(r)};fetch("http://122.51.19.160:8080/loginBypc",{method:"POST",body:JSON.stringify(o),headers:new Headers({"Content-Type":"application/json"})}).then(e=>e.json()).then(e=>{let n=document.getElementById("statusDiv");"success"===e.status?(n.innerHTML=e.data,n.setAttribute("class","alert alert-success"),window.location.href="./mainPage.html"):(n.innerHTML=e.data,n.setAttribute("class","alert alert-danger"))}).catch(e=>{console.log(e)})}function o(e){13===e.keyCode&&r()}e.addEventListener("click",r),e.addEventListener("keydown",o),n.addEventListener("keydown",o),t.addEventListener("keydown",o)}(),function(){const e=document.getElementById("UPsubmitBtn"),n=document.getElementById("username"),t=document.getElementById("password"),r=document.getElementById("rememberMe");function o(){let e=n.value.trim(),o=t.value.trim();if(0!=e.length&&0!=o.length){let i={username:e,password:o};fetch("http://122.51.19.160:8080/loginByup",{method:"POST",body:JSON.stringify(i),headers:new Headers({"Content-Type":"application/json"})}).then(e=>e.json()).then(e=>{let o=document.getElementById("statusDiv");"success"===e.status?(o.innerHTML=e.data,o.setAttribute("class","alert alert-success"),!0===r.checked?(setCookie("This is username",n,7),setCookie(n,t,7),console.log("setCookie")):(delCookie("This is username"),delCookie(n))):(o.innerHTML=e.data,o.setAttribute("class","alert alert-danger"))}).catch(e=>{console.log(e)})}else statusDiv.innerHTML="账号或密码为空",statusDiv.setAttribute("class","alert alert-danger")}function i(e){13===e.keyCode&&o()}e.addEventListener("click",o),e.addEventListener("keydown",i),n.addEventListener("keydown",i),t.addEventListener("keydown",i)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,