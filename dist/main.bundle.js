!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=34)}([function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function l(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},r=[],o=0;o<e.length;o++){var i=e[o],s=n.base?i[0]+n.base:i[0],c=t[s]||0,d="".concat(s," ").concat(c);t[s]=c+1;var p=l(d),u={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(a[p].references++,a[p].updater(u)):a.push({identifier:d,updater:g(u,n),references:1}),r.push(d)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var d,p=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function u(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function f(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function g(e,n){var t,r,o;if(n.singleton){var i=h++;t=m||(m=c(n)),r=u.bind(null,t,i,!1),o=u.bind(null,t,i,!0)}else t=c(n),r=f.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=l(t[r]);a[o].references--}for(var i=s(e,n),c=0;c<t.length;c++){var d=l(t[c]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}t=i}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var a,l,s;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},function(e,n,t){"use strict";function r(e){return e<10&&(e="0"+e),e}function o(){let e=new Date,n=e.getHours(),t=e.getMinutes(),o=e.getSeconds();n=r(n),t=r(t),o=r(o),document.getElementById("timeDiv").innerHTML=n+":"+t+":"+o}function i(){document.getElementById("homePage").addEventListener("click",(function(){window.location.href="./mainPage.html"})),document.getElementById("monitor").addEventListener("click",(function(){window.location.href="./monitor.html"})),document.getElementById("report").addEventListener("click",(function(){window.location.href="./report.html"})),document.getElementById("closePage").addEventListener("click",(function(){window.location.href="./login.html"}))}t.d(n,"a",(function(){return r})),t.d(n,"c",(function(){return o})),t.d(n,"b",(function(){return i}))},,,,,,,,,,,,,,,,,,function(e,n,t){var r=t(0),o=t(21);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,".amap-logo {\r\n    display: none;\r\n    opacity: 0;\r\n}\r\n\r\n.amap-copyright {\r\n    opacity: 0;\r\n}\r\n\r\n#main {\r\n    height: 90%;\r\n    position: relative;\r\n    margin-left: 20px;\r\n    margin-right: 20px;\r\n    display: flex;\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(23);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,".modal-content {\r\n    /*弹窗的边框、边距、背景色和阴影等样式*/\r\n    position: relative;\r\n    background-color: slategray;\r\n    color: snow;\r\n    -webkit-background-clip: padding-box;\r\n    background-clip: padding-box;\r\n    border: 1px solid #999;\r\n    border: 1px solid rgba(0, 0, 0, 0.2);\r\n    border-radius: 6px;\r\n    outline: 0;\r\n    -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\r\n    box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.modal-header {\r\n    /*头部*/\r\n    min-height: 16.42857143px;\r\n    padding: 15px;\r\n    border-bottom: 1px solid #e5e5e5;\r\n}\r\n.modal-header .close {\r\n    /*关闭按键*/\r\n    margin-top: -2px;\r\n}\r\n.modal-title {\r\n    margin: 0;\r\n    line-height: 1.42857143;\r\n}\r\n.modal-body {\r\n    position: relative;\r\n    padding: 15px;\r\n}\r\n.modal-footer {\r\n    padding: 15px;\r\n    text-align: right;\r\n    border-top: 1px solid #e5e5e5;\r\n}\r\n\r\n.modal-footer .btn + .btn {\r\n    margin-bottom: 0;\r\n    margin-left: 5px;\r\n}\r\n.modal-footer .btn-group .btn + .btn {\r\n    margin-left: -1px;\r\n}\r\n.modal-footer .btn-block + .btn-block {\r\n    margin-left: 0;\r\n}\r\n\r\n.modal {\r\n    /*固定在浏览器实现*/\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1050;\r\n    display: none;\r\n    overflow: hidden;\r\n    -webkit-overflow-scrolling: touch;\r\n    outline: 0;\r\n}\r\n\r\n.modal-dialog {\r\n    /*水平居中*/\r\n    position: relative;\r\n    width: auto;\r\n    margin: 10px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n    /*当浏览器视窗大于768px时，模态弹出窗的宽度为600px实现*/\r\n    .modal-dialog {\r\n        width: 600px;\r\n        margin: 30px auto;\r\n    }\r\n    .modal-content {\r\n        -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\r\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\r\n    }\r\n    .modal-sm {\r\n        width: 300px;\r\n    }\r\n}\r\n\r\n.modal-open {\r\n    overflow: hidden;\r\n}\r\n\r\n.modal-backdrop {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1040;\r\n    background-color: #000;\r\n}\r\n\r\n.modal-backdrop.fade {\r\n    filter: alpha(opacity=0);\r\n    opacity: 0;\r\n}\r\n.modal-backdrop.in {\r\n    filter: alpha(opacity=50);\r\n    opacity: 0.5;\r\n}\r\n\r\n.modal.fade .modal-dialog {\r\n    /*动画效果*/\r\n    -webkit-transition: -webkit-transform 0.3s ease-out;\r\n    -o-transition: -o-transform 0.3s ease-out;\r\n    transition: transform 0.3s ease-out;\r\n    -webkit-transform: translate3d(0, -25%, 0);\r\n    -o-transform: translate3d(0, -25%, 0);\r\n    transform: translate3d(0, -25%, 0);\r\n}\r\n\r\n.modal.in .modal-dialog {\r\n    -webkit-transform: translate3d(0, 0, 0);\r\n    -o-transform: translate3d(0, 0, 0);\r\n    transform: translate3d(0, 0, 0);\r\n}\r\n\r\n#mainMapAreaSelectPageBtn {\r\n    position: absolute;\r\n    z-index: 3;\r\n}\r\n\r\n/* #mymodal {\r\n    position: absolute;\r\n} */\r\n\r\n.btn {\r\n    color: black;\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(25);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,"#leftLine {\r\n    position: relative;\r\n    width: 24%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-direction: column;\r\n}\r\n\r\n.left_div {\r\n    height: 42%;\r\n    border: snow solid 1px;\r\n    position: relative;\r\n}\r\n\r\n#tripNumTitleDiv,\r\n#migrationMapTitleDiv {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(-10%);\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n#tripNumTitleDiv span,\r\n#migrationMapTitleDiv span {\r\n    display: inline-block;\r\n    color: lightskyblue;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#stateSelectButton {\r\n    position: absolute;\r\n    top: calc(3%);\r\n    right: calc(3%);\r\n    z-index: 2;\r\n    color: white;\r\n    background-color: #0b122e;\r\n    font-size: 0.9rem;\r\n    border: 1px solid darkgrey;\r\n    border-radius: 10px;\r\n    padding: 2px;\r\n}\r\n\r\n#tripNumDivByTime,\r\n#tripNumDivBySpace {\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n}\r\n#tripNumDivBySpace {\r\n    display: none;\r\n}\r\n\r\n#migrationMapDiv {\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n    background-color: transparent;\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(27);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,"#middleLine {\r\n    width: 52%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-direction: column;\r\n}\r\n.middleLineDiv {\r\n    position: relative;\r\n    height: 92%;\r\n    width: 84%;\r\n    margin-left: 8%;\r\n    margin-right: 8%;\r\n    border: snow solid 1px;\r\n}\r\n#mainMapAndTitle {\r\n    height: 100%;\r\n}\r\n\r\n#mainMapTitleDiv {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(-5%);\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n#mainMapTitleDiv span {\r\n    display: inline-block;\r\n    color: lightskyblue;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#mainMapSelectBtn {\r\n    position: absolute;\r\n    z-index: 2;\r\n    right: calc(1.5%);\r\n    top: calc(1%);\r\n    color: white;\r\n    background-color: #0b122e;\r\n    border: 1px solid darkgray;\r\n    border-radius: 5px;\r\n}\r\n\r\n#mainMapDiv {\r\n    z-index: 1;\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n}\r\n\r\n#messageFlowAndCloseBtn {\r\n    display: none;\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(0%);\r\n    border-top: 1px solid white;\r\n}\r\n\r\n#messageFlowTitleDiv {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(-12%);\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n#messageFlowTitleDiv span {\r\n    display: inline-block;\r\n    color: lightskyblue;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n}\r\n#messageFlowAreaNameDiv {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(0%);\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n#messageFlowAreaNameDiv span {\r\n    display: inline-block;\r\n    color: lightskyblue;\r\n    font-size: 1.1rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#closeMessageFlowDivBtn {\r\n    position: absolute;\r\n    z-index: 2;\r\n    right: calc(2%);\r\n    top: calc(1%);\r\n    cursor: pointer;\r\n    color: white;\r\n}\r\n\r\n#messageFlowDiv {\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(29);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,"#rightLine {\r\n    position: relative;\r\n    width: 24%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-direction: column;\r\n}\r\n\r\n.right_div {\r\n    height: 42%;\r\n    border: snow solid 1px;\r\n    position: relative;\r\n}\r\n\r\n#regionStayNumTitleDiv,\r\n#vehicleTypeTitleDiv {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(-10%);\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n#regionStayNumTitleDiv span,\r\n#vehicleTypeTitleDiv span {\r\n    display: inline-block;\r\n    color: lightskyblue;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n}\r\n\r\n#regionStayNumDiv {\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n}\r\n\r\n#areaSelectDiv {\r\n    position: absolute;\r\n    text-align: center;\r\n    top: calc(3%);\r\n    right: calc(3%);\r\n    z-index: 2;\r\n    font-size: 1rem;\r\n}\r\n\r\n#areaSelectDiv span {\r\n    color: white;\r\n}\r\n\r\n#areaSelectDiv select {\r\n    position: relative;\r\n    color: white;\r\n    background-color: #0b122e;\r\n    display: inline;\r\n    border: 1px solid darkgray;\r\n    border-radius: 5px;\r\n}\r\n\r\n#vehicleTypeDiv {\r\n    position: relative;\r\n    width: calc(100%);\r\n    height: calc(100%);\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(31);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,".horn {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.horn > div {\r\n    width: 10px;\r\n    height: 10px;\r\n    position: absolute;\r\n}\r\n\r\n.horn .lt {\r\n    border-top: 3px solid #00d3e7;\r\n    border-left: 3px solid #00d3e7;\r\n    left: -3px;\r\n    top: -3px;\r\n}\r\n\r\n.horn .rt {\r\n    border-top: 3px solid #00d3e7;\r\n    border-right: 3px solid #00d3e7;\r\n    right: -3px;\r\n    top: -3px;\r\n}\r\n\r\n.horn .rb {\r\n    border-bottom: 3px solid #00d3e7;\r\n    border-right: 3px solid #00d3e7;\r\n    right: -3px;\r\n    bottom: -3px;\r\n}\r\n\r\n.horn .lb {\r\n    border-bottom: 3px solid #00d3e7;\r\n    border-left: 3px solid #00d3e7;\r\n    left: -3px;\r\n    bottom: -3px;\r\n}\r\n",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(33);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){(n=t(1)(!1)).push([e.i,'.quit_btn::before,\r\n.quit_btn::after {\r\n    content: "";\r\n    position: absolute;\r\n    top: 17px;\r\n    left: 17px;\r\n}\r\n.quit_btn::before {\r\n    width: 20px;\r\n    height: 20px;\r\n    border: 3px solid #62fffd;\r\n    border-radius: 50%;\r\n}\r\n.quit_btn::after {\r\n    top: 14px;\r\n    left: 26px;\r\n    width: 3px;\r\n    height: 13px;\r\n    border-radius: 2px/4px;\r\n    background-color: #62fffd;\r\n    /* box-shadow: 0 0 0 4px #fff; */\r\n}\r\n.quit_btn {\r\n    position: absolute;\r\n    left: -50px;\r\n    top: -15px;\r\n}\r\n',""]),e.exports=n},function(e,n,t){"use strict";t.r(n);t(20),t(22),t(24),t(26),t(28),t(30),t(32);let r=[{name:"沈阳市",lng:123.43,lat:41.8},{name:"和平区",lng:123.4,lat:41.77},{name:"沈河区",lng:123.45,lat:41.79},{name:"大东区",lng:123.5,lat:41.85},{name:"皇姑区",lng:123.45,lat:41.86},{name:"铁西区",lng:123.17,lat:41.7},{name:"于洪区",lng:123.3,lat:41.88},{name:"辽中区",lng:122.72,lat:41.52},{name:"康平县",lng:123.35,lat:42.75},{name:"法库县",lng:123.4,lat:42.5},{name:"新民市",lng:122.82,lat:42},{name:"苏家屯区",lng:123.33,lat:41.67},{name:"沈北新区",lng:123.58,lat:41.91},{name:"浑南区",lng:123.62,lat:41.77}];var o=t(2);let i=echarts.init(document.getElementById("messageFlowDiv"));!function(){let e=document.getElementById("closeMessageFlowDivBtn"),n=document.getElementById("mainMapAndTitle"),t=document.getElementById("messageFlowAndCloseBtn");e.addEventListener("click",(function(){t.style.display="none",t.style.height="0%",n.style.height="100%",showDataToMessageFlow=""}))}();let a="",l=[],s=[];$("#mainMapSelectBtn").click((function(){$("#mymodal").modal()})),fetch("http://122.51.19.160:8080/datas.json").then(e=>e.json()).then(e=>{echarts.registerMap("ShenYang",e),console.log("geoJson is ready")}).catch(e=>{console.log(e)}),function(){let e=new AMap.Map("mainMapDiv",{zoom:7.5,zooms:[7.5,16],center:[123.38333,42],pitch:0,mapStyle:"amap://styles/40035571fa9fdd05a26fe1b05f48fdc9"}),n=["和平区","辽中区","铁西区","新民市","苏家屯区","沈河区","康平县","法库县","沈北新区","于洪区","浑南区","皇姑区","大东区"];!function(){n.forEach((function(n){new AMap.DistrictSearch({extensions:"all",subdistrict:0}).search(n,(function(n,t){var r=t.districtList[0].boundaries,o=new AMap.Polygon({pathL:r,strokeColor:"rgb(147, 235, 248)",strokeWeight:1,strokeOpacity:.6,strokeStyle:"solid",strokeDasharray:[10,2,10],fillColor:"#0C1F34",fillOpacity:0});o.setPath(r),e.add(o)}))})),new AMap.DistrictSearch({extensions:"all",subdistrict:0}).search("沈阳",(function(n,t){var r=[new AMap.LngLat(-360,90,!0),new AMap.LngLat(-360,-90,!0),new AMap.LngLat(360,-90,!0),new AMap.LngLat(360,90,!0)],o=t.districtList[0].boundaries,i=[r];i.push.apply(i,o);var a=new AMap.Polygon({pathL:i,strokeColor:"rgb(147, 235, 248)",strokeWeight:2,strokeOpacity:.9,fillColor:"#0C1F34",fillOpacity:1,strokeStyle:"solid",strokeDasharray:[10,2,10]});a.setPath(i),e.add(a)}));for(let n=0;n<r.length;n++){let t=r[n],o=new AMap.LngLat(t.lng,t.lat);new AMap.Circle({map:e,center:o,radius:400,strokeColor:"#666",strokeWeight:.1,strokeOpacity:.5,fillColor:"white",fillOpacity:.2,zIndex:11,cursor:"pointer"}).on("click",(function(n){new AMap.InfoWindow({content:t.name}).open(e,n.lnglat)}))}}(),function(){let n=new SockJS("http://122.51.19.160:8080/hhuc"),t=Stomp.over(n);t.connect({},(function(){t.subscribe("/user/map/heatmap",(function(n){let t=JSON.parse(n.body);e.plugin(["AMap.Heatmap"],(function(){new AMap.Heatmap(e,{radius:15,opacity:[0,.8]}).setDataSet({data:t,max:100})}))}))}))}();let t=[{name:"维华商业广场",lng:123.404052,lat:41.829494},{name:"八一公园",lng:123.431399,lat:41.807924},{name:"沈阳故宫",lng:123.46221,lat:41.803282},{name:"沈阳中街",lng:123.460605,lat:41.807322},{name:"沈阳西湖风景区",lng:122.889617,lat:41.765946},{name:"沈阳国家森林公园",lng:123.728897,lat:42.028802},{name:"沈阳怪坡风景区",lng:123.647283,lat:42.067571},{name:"新民清真寺",lng:122.83792,lat:42.000161},{name:"豪林购物中心",lng:122.737988,lat:41.518242}],o=[];t.forEach((function(e){o.push(e.name)}));let c={places:o};fetch("http://122.51.19.160:8080/putPlaces",{method:"POST",body:JSON.stringify(c),headers:new Headers({"Content-Type":"application/json"})}).catch(e=>{console.log(e)});for(let n=0;n<t.length;n++){let r=t[n],o=r.name,s=new AMap.LngLat(r.lng,r.lat);AMapUI.loadUI(["overlay/SvgMarker"],(function(n){n.supportSvg;let t=new n.Shape.TriangleFlagPin({height:20,fillColor:"springgreen",strokeWidth:1,strokeColor:"#666"}),r=new n(t,{showPositionPoint:!0,map:e,position:s}),c={name:o,marker:r,overflow:!1};l.push(c),r.on("click",(function(n){new AMap.InfoWindow({content:o}).open(e,n.lnglat);let t=document.getElementById("mainMapAndTitle"),r=document.getElementById("messageFlowAndCloseBtn");document.getElementById("messageFlowAreaName").innerHTML=o,r.style.display="block",r.style.height="30%",t.style.height="70%",i.resize(),i.showLoading(),a=o})),r.hide()}))}document.getElementById("mainMapConfirmBtn").addEventListener("click",(function(){for(let e=0;e<l.length;e++){let n=l[e];!1===n.overflow&&n.marker.hide()}s=[];let e=document.getElementById("myCheckBoxTable");for(let n=0;n<e.rows.length;n++)for(let t=0;t<e.rows[n].cells.length;t++){let r=e.rows[n].cells[t].children[0];r.checked&&s.push(r.name)}for(let e=0;e<s.length;e++){let n=s[e];for(let e=0;e<l.length;e++)n===l[e].name&&!1===l[e].overflow&&l[e].marker.show()}})),document.getElementById("mainMapRegretBtn").addEventListener("click",(function(){let e=document.getElementById("myCheckBoxTable");for(let n=0;n<e.rows.length;n++)for(let t=0;t<e.rows[n].cells.length;t++){let r=e.rows[n].cells[t].children[0];r.checked&&-1===s.indexOf(r.name)&&(r.checked=!1)}}))}(),function(){let e=[],n=[];function t(t,r){let i=new Date;i=[Object(o.a)(i.getHours()),Object(o.a)(i.getMinutes()),Object(o.a)(i.getSeconds())].join(":"),e.push(i),n.push(r),t&&(e.shift(),n.shift())}!function(){let r=0,o={name:""},c=[],d=new SockJS("http://122.51.19.160:8080/hhuc"),p=Stomp.over(d);p.connect({},(function(){p.subscribe("/user/place/hotplace",(function(d){let p=JSON.parse(d.body);!0===p.overflow?l.forEach((function(e){e.name===p.name&&(c.push(e.name),e.overflow=!0,AMapUI.loadUI(["overlay/SvgMarker"],(function(n){e.marker.setSvgShape(new n.Shape.TriangleFlagPin({height:25,fillColor:"orangered",strokeWidth:1,strokeColor:"#666"}))})),e.marker.show())})):c.forEach((function(e,n){e===p.name&&(c.splice(n,1),l.forEach((function(n){n.name===e&&(n.overflow=!1,AMapUI.loadUI(["overlay/SvgMarker"],(function(e){n.marker.setSvgShape(new e.Shape.TriangleFlagPin({height:20,fillColor:"springgreen",strokeWidth:1,strokeColor:"#666"}))})),n.marker.hide(),-1!==s.indexOf(n.name)&&n.marker.show())})))})),i.hideLoading(),p.name===a&&(p.name===o.name?(r++,t(!(r<7),p.nowNum),i.setOption({xAxis:{data:e},series:[{name:"数量",data:n}]})):(r=0,e=[],n=[],t(!1,p.nowNum),i.setOption({grid:{top:"20%",left:"10%",right:"10%",bottom:"12%"},xAxis:{type:"category",boundaryGap:!1,data:e,axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},yAxis:{type:"value",axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},tooltip:{trigger:"axis"},series:[{name:"数量",type:"line",symbolSize:8,smooth:!1,stack:"zzz",data:n,markLine:{data:[{name:"fsdf",yAxis:p.maxnum}]},itemStyle:{normal:{color:"red",lineStyle:{color:"#2B908F"},label:{}}}}]})),o=p)}))}))}(),window.addEventListener("resize",(function(){i.resize()}))}(),function(){let e=echarts.init(document.getElementById("migrationMapDiv")),n=[];r.forEach((function(e,t){n.push(e.name)}));let t=[];function o(e){let n=[];return r.forEach((function(t){t.name===e&&(n.push(t.lng),n.push(t.lat))})),n}function i(e){let n=[];return e.forEach((e,t)=>{let r=o(e.startArea),i=o(e.endArea);r&&i&&n.push({fromName:e.startArea,toName:e.endArea,coords:[r,i]})}),n}n.forEach((function(e,n){let r={name:e,value:[]};t.push(r)})),fetch("http://122.51.19.160:8080/getCrossRegionVolumes").then(e=>e.json()).then(n=>{n.forEach((function(e,n){t.forEach((function(n,t){e.startArea===n.name&&e.startArea!==e.endArea&&n.value.push(e)}))}));let r=[];t.forEach((function(e,n){if(0!==e.value.length){let n=[{name:e.name,value:o(e.value[0].startArea).concat([5])}];r.push({name:e.name,type:"effectScatter",coordinateSystem:"geo",zlevel:3,rippleEffect:{brushType:"stroke"},label:{normal:{show:!0,position:"right",formatter:"{b}"}},tooltip:{formatter:function(e,n,t){let r="",o=e.seriesName;return r=o+"->"+o+"<br/>数量："+e.data.value[2],r}},symbolSize:5,itemStyle:{normal:{color:"aqua"}},data:n},{name:e.name,type:"lines",zlevel:2,symbol:["none"],symbolSize:5,tooltip:{formatter:function(e,n,t){return""}},effect:{show:!0,period:3,trailLength:.7,symbol:"arrow",symbolSize:5},lineStyle:{normal:{color:"white",width:1,opacity:.6,curveness:.2}},data:i(e.value)},{name:e.name,type:"effectScatter",coordinateSystem:"geo",zlevel:3,rippleEffect:{brushType:"stroke"},label:{normal:{show:!0,position:"right",formatter:"{b}"}},tooltip:{formatter:function(e,n,t){let r="",o=e.seriesName,i=e.name,a=e.value;return e.value[e.seriesIndex+1],r=o+"->"+i+"<br/>数量："+a[2],r}},symbolSize:function(e){return e[2]},itemStyle:{normal:{color:"#a6c84c"}},data:e.value.map((function(e){return{name:e.endArea,value:o(e.endArea).concat([e.value])}}))})}}));let a=[];t.forEach((function(e,n){0!==e.value.length&&a.push(e.name)})),e.setOption({tooltip:{trigger:"item"},legend:{orient:"vertical",top:"bottom",left:"right",data:a,textStyle:{color:"#fff"},selectedMode:"single"},geo:{map:"ShenYang",center:[123.43,41.8],zoom:5,roam:!0,label:{normal:{show:!1,textStyle:{color:"#b7b6c9"}},emphasis:{show:!1,textStyle:{color:"#b7b6c9"}}},itemStyle:{borderColor:"rgba(147, 235, 248, 1)",borderWidth:.3,areaColor:{type:"radial",x:.5,y:.5,r:.8,colorStops:[{offset:0,color:"rgba(175,238,238, 0)"},{offset:1,color:"rgba(47,79,79, .1)"}],globalCoord:!1},emphasis:{areaColor:"rgba(47,79,79, .1)",borderWidth:.3}}},series:r})}).catch(e=>{console.log(e)}),window.addEventListener("resize",(function(){e.resize()}))}(),function(){let e=document.getElementById("stateSelectButton"),n=document.getElementById("tripNumTitle"),t=document.getElementById("tripNumDivByTime"),o=document.getElementById("tripNumDivBySpace");function i(){fetch("http://122.51.19.160:8080/getTravelTimeVolumes").then(e=>e.json()).then(e=>{let n=echarts.init(document.getElementById("tripNumDivByTime"));n.setOption({tooltip:{trigger:"axis"},xAxis:{type:"time",boundaryGap:!1,axisLabel:{textStyle:{color:"#fff",fontSize:"12"}}},yAxis:{axisLabel:{textStyle:{color:"#fff",fontSize:"12"}}},series:{type:"line",encode:{x:"time",y:"value"}},dataset:{source:e},dataZoom:[{type:"inside"}],series:{type:"line",encode:{x:"time",y:"data"}}}),window.addEventListener("resize",(function(){n.resize()}))}).catch(e=>{console.log(e)})}e.addEventListener("click",(function(){"切换为区域分布"===e.innerText?(console.log("切换为区域分布"),n.innerText="各区域人口出行量分析",e.innerText="切换为时间分布",t.style.display="none",o.style.display="block",fetch("http://122.51.19.160:8080/getTravelAreaVolumes").then(e=>e.json()).then(e=>{let n=echarts.init(document.getElementById("tripNumDivBySpace")),t=function(e){let n=[];for(let t=0;t<e.length;t++){const o=e[t];for(let e=0;e<r.length;e++)if(r[e].name===o.area){n.push(o);break}}return n.sort((function(e,n){return n.data-e.data})),console.log(n),n}(e);n.setOption({tooltip:{trigger:"axis"},xAxis:{type:"category",axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},yAxis:{axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},dataZoom:[{type:"inside"}],dataset:{source:t},series:[{type:"pictorialBar",barCategoryGap:"0%",encode:{x:"area",y:"data"},symbol:"path://M0,10 L10,10 C5.5,10 5.5,5 5,0 C4.5,5 4.5,10 0,10 z",label:{show:!0,position:"top",distance:15,color:"aquamarine",fontSize:12},itemStyle:{normal:{color:{type:"linear",x:0,y:0,x2:0,y2:1,colorStops:[{offset:0,color:"orangered"},{offset:1,color:"salmon"}],global:!1}},emphasis:{opacity:1}},z:10}]}),window.addEventListener("resize",(function(){n.resize()}))})):(n.innerText="各时间人口出行量分析",e.innerText="切换为区域分布",o.style.display="none",t.style.display="block",i())})),i()}(),function(){let e=echarts.init(document.getElementById("regionStayNumDiv"));e.setOption({tooltip:{formatter:function(e,n,t){return e.name+"<br/>数量："+e.value}},roseType:"angle",textStyle:{color:"rgba(255, 255, 255, 0.6)"},labelLine:{lineStyle:{color:"rgba(255, 255, 255, 0.6)"}},itemStyle:{color:"dodgerblue",shadowBlur:200,shadowColor:"rgba(0, 0, 0, 0.5)"},visualMap:{show:!1,min:10,max:300,inRange:{colorLightness:[.9,.3]}}}),fetch("http://122.51.19.160:8080/getAreaStayVolumes").then(e=>e.json()).then(n=>{console.log("setRegionStayNum"),console.log(n),n=function(e,n){let t=[],r=n;e=e.sort((function(e,n){return n.value-e.value}));for(let n=0;n<r-1;n++){const r=e[n];t.push(r)}let o=0;for(let n=r-1;n<e.length;n++)o+=e[n].value;let i=new Object;return i.name="其他地区",i.value=o,t.push(i),t}(n,6),e.setOption({series:{name:"区人口密度",type:"pie",radius:"50%",data:n}}),window.addEventListener("resize",(function(){e.resize()}))}).catch(e=>{console.log(e)})}(),function(){const e=document.getElementById("areaSelect");function n(e){fetch("http://122.51.19.160:8080/getTravelWayVolumeByArea?area="+e).then(e=>e.json()).then(e=>{let n=echarts.init(document.getElementById("vehicleTypeDiv")),t={tooltip:{trigger:"axis"},dataset:{source:e},xAxis:{type:"category",axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},yAxis:{axisLabel:{show:!0,textStyle:{color:"#fff",fontSize:"12"}}},series:[{type:"bar",barWidth:40,encode:{x:"way",y:"data"},itemStyle:{normal:{color:new echarts.graphic.LinearGradient(0,0,0,1,[{offset:0,color:"#FF9A22"},{offset:1,color:"#FFD56E"}],!1),barBorderRadius:[30,30,0,0]}},label:{show:!0,fontSize:12,fontWeight:"bold",position:"top",color:"turquoise"}}]};n.setOption(t),window.addEventListener("resize",(function(){n.resize()}))}).catch(e=>{console.log(e)})}e.addEventListener("change",(function(){n(e.value)})),n(e.value)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19zdHlsZS1sb2FkZXJAMS4yLjFAc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19jc3MtbG9hZGVyQDMuNS4zQGNzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVhZGVyL2hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpblBhZ2UvY3NzL21haW4uY3NzPzY3NDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2Nzcy9tYWluLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpblBhZ2UvY3NzL2FsZXJ0LmNzcz9lYzdmIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvYWxlcnQuY3NzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvbGVmdC5jc3M/OTJhMiIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpblBhZ2UvY3NzL2xlZnQuY3NzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvbWlkZGxlLmNzcz82ZWZhIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvbWlkZGxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpblBhZ2UvY3NzL3JpZ2h0LmNzcz9iOTU3Iiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvcmlnaHQuY3NzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9jc3MvbGliL2hvcm4uY3NzPzkwYjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2Nzcy9saWIvaG9ybi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2Nzcy9saWIvcXVpdF9idG4uY3NzPzY5YzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2Nzcy9saWIvcXVpdF9idG4uY3NzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9qcy9jaGFydHNPcHRpb24vZ2VvQ29vcmRNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2pzL21pZGRsZS9tZXNzYWdlRmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpblBhZ2UvanMvbWlkZGxlL21haW5NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2pzL2hpZGVNZW51L2hpZGVNZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9qcy9jaGFydHNPcHRpb24vcmVnaXN0ZXJNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL21haW5QYWdlRW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2pzL2xlZnQvbWlncmF0aW9uTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluUGFnZS9qcy9sZWZ0L3RyaXBOdW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2pzL3JpZ2h0L3JlZ2lvblN0YXlOdW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW5QYWdlL2pzL3JpZ2h0L3ZlaGljbGVUeXBlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibGVuZ3RoIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwidXNlU291cmNlTWFwIiwidGhpcyIsIm1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsImRhdGEiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJjaGVja1RpbWUiLCJ0aW1lIiwic3RhcnRUaW1lIiwiZGF0ZSIsIkRhdGUiLCJob3VyIiwiZ2V0SG91cnMiLCJtaW51dGUiLCJnZXRNaW51dGVzIiwic2Vjb25kIiwiZ2V0U2Vjb25kcyIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwic2V0SGVhZGVyQnV0dG9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2NhdGlvbiIsImhyZWYiLCJhcGkiLCJkZWZhdWx0IiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiZ2VvQ29vcmRNYXAiLCJsbmciLCJsYXQiLCJtZXNzYWdlRmxvdyIsImVjaGFydHMiLCJpbml0IiwiY2xvc2VNZXNzYWdlRmxvd0RpdkJ0biIsIm1haW5NYXBBbmRUaXRsZSIsIm1lc3NhZ2VGbG93QW5kQ2xvc2VCdG4iLCJkaXNwbGF5IiwiaGVpZ2h0Iiwic2hvd0RhdGFUb01lc3NhZ2VGbG93Iiwic2V0TWVzc2FnZUZsb3dDbG9zZUJ0biIsImtleVBvaW50T2JqTGlzdCIsImtleVBvaW50U2VsZWN0TGlzdCIsIiQiLCJjbGljayIsIm1vZGFsIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsImdlb0pzb24iLCJyZWdpc3Rlck1hcCIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIkFNYXAiLCJNYXAiLCJ6b29tIiwiem9vbXMiLCJjZW50ZXIiLCJwaXRjaCIsIm1hcFN0eWxlIiwiYXJlYSIsIkRpc3RyaWN0U2VhcmNoIiwiZXh0ZW5zaW9ucyIsInN1YmRpc3RyaWN0Iiwic2VhcmNoIiwic3RhdHVzIiwiaG9sZXMiLCJkaXN0cmljdExpc3QiLCJib3VuZGFyaWVzIiwicG9seWdvbiIsIlBvbHlnb24iLCJwYXRoTCIsInN0cm9rZUNvbG9yIiwic3Ryb2tlV2VpZ2h0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVN0eWxlIiwic3Ryb2tlRGFzaGFycmF5IiwiZmlsbENvbG9yIiwiZmlsbE9wYWNpdHkiLCJzZXRQYXRoIiwiYWRkIiwib3V0ZXIiLCJMbmdMYXQiLCJwYXRoQXJyYXkiLCJhcHBseSIsImVsZW1lbnQiLCJDaXJjbGUiLCJyYWRpdXMiLCJ6SW5kZXgiLCJjdXJzb3IiLCJvbiIsIkluZm9XaW5kb3ciLCJvcGVuIiwibG5nbGF0IiwibWFpbk1hcEluaXQiLCJTb2NrZXQiLCJTb2NrSlMiLCJob3N0IiwiU3RvbXBDbGllbnQiLCJTdG9tcCIsIm92ZXIiLCJjb25uZWN0Iiwic3Vic2NyaWJlIiwicmVzcG9uc2UiLCJwYXJzZSIsImJvZHkiLCJwbHVnaW4iLCJIZWF0bWFwIiwib3BhY2l0eSIsInNldERhdGFTZXQiLCJtYXgiLCJnZXRSZWdpb25TdGF5TnVtRGF0YSIsImtleVBvaW50RGljdCIsImtleVBvaW50TmFtZUxpc3QiLCJvcmlEYXRhIiwicGxhY2VzIiwibWV0aG9kIiwiaGVhZGVycyIsIkhlYWRlcnMiLCJBTWFwVUkiLCJsb2FkVUkiLCJTdmdNYXJrZXIiLCJzdXBwb3J0U3ZnIiwic2hhcGUiLCJTaGFwZSIsIlRyaWFuZ2xlRmxhZ1BpbiIsInN0cm9rZVdpZHRoIiwibWFya2VyIiwic2hvd1Bvc2l0aW9uUG9pbnQiLCJwb3NpdGlvbiIsIm92ZXJmbG93IiwicmVzaXplIiwic2hvd0xvYWRpbmciLCJoaWRlIiwibXlDaGVja0JveFRhYmxlIiwicm93cyIsImoiLCJjZWxscyIsImNoaWxkcmVuIiwiY2hlY2tlZCIsInNlbGVjdEtleVBvaW50Iiwic2hvdyIsImluZGV4T2YiLCJzZXRNYWluTWFwIiwiYWRkRGF0YSIsInNoaWZ0IiwibmV3RGF0YSIsIm5vdyIsImxhc3REYXRhT2JqIiwib3ZlckZsb3dOYW1lTGlzdCIsIm5ld0RhdGFPYmoiLCJrZXlQb2ludE9iaiIsInNldFN2Z1NoYXBlIiwib3ZlckZsb3dOYW1lIiwiaGlkZUxvYWRpbmciLCJub3dOdW0iLCJzZXRPcHRpb24iLCJ4QXhpcyIsInNlcmllcyIsImdyaWQiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0eXBlIiwiYm91bmRhcnlHYXAiLCJheGlzTGFiZWwiLCJ0ZXh0U3R5bGUiLCJjb2xvciIsImZvbnRTaXplIiwieUF4aXMiLCJ0b29sdGlwIiwidHJpZ2dlciIsInN5bWJvbFNpemUiLCJzbW9vdGgiLCJzdGFjayIsIm1hcmtMaW5lIiwibWF4bnVtIiwiaXRlbVN0eWxlIiwibm9ybWFsIiwibGluZVN0eWxlIiwibGFiZWwiLCJnZXRNZXNzYWdlRmxvd0RhdGEiLCJzZXRNZXNzYWdlRmxvdyIsIm1pZ3JhdGlvbk1hcCIsImFyZWFOYW1lTGlzdCIsImRhdGFMaXN0IiwiZ2V0Q29vcmQiLCJhcmVhTmFtZSIsImxuZ2xhdExpc3QiLCJjb252ZXJ0RGF0YSIsImRhdGFJdGVtIiwiZnJvbUNvb3JkIiwic3RhcnRBcmVhIiwidG9Db29yZCIsImVuZEFyZWEiLCJmcm9tTmFtZSIsInRvTmFtZSIsImNvb3JkcyIsInRlbXBPYmoiLCJvYmpJdGVtIiwic3RhcnRBcmVhRGF0YSIsImNvb3JkaW5hdGVTeXN0ZW0iLCJ6bGV2ZWwiLCJyaXBwbGVFZmZlY3QiLCJicnVzaFR5cGUiLCJmb3JtYXR0ZXIiLCJwYXJhbXMiLCJ0aWNrZXQiLCJjYWxsYmFjayIsInNlcmllc05hbWUiLCJzeW1ib2wiLCJlZmZlY3QiLCJwZXJpb2QiLCJ0cmFpbExlbmd0aCIsIndpZHRoIiwiY3VydmVuZXNzIiwiYmVnaW5BcmVhTmFtZSIsImVuZEFyZWFOYW1lIiwic2VyaWVzSW5kZXgiLCJ2YWwiLCJzaG93TGlzdCIsImxlZ2VuZCIsIm9yaWVudCIsInNlbGVjdGVkTW9kZSIsImdlbyIsInJvYW0iLCJlbXBoYXNpcyIsImJvcmRlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJhcmVhQ29sb3IiLCJ4IiwieSIsImNvbG9yU3RvcHMiLCJvZmZzZXQiLCJnbG9iYWxDb29yZCIsInNldE1pZ3JhdGlvbk1hcCIsInN0YXRlU2VsZWN0QnV0dG9uIiwidHJpcE51bVRpdGxlIiwidHJpcE51bURpdkJ5VGltZSIsInRyaXBOdW1EaXZCeVNwYWNlIiwic2V0Q2hhcnRCeVRpbWUiLCJ0cmlwTnVtIiwiZW5jb2RlIiwiZGF0YXNldCIsImRhdGFab29tIiwiaW5uZXJUZXh0IiwicmVEYXRhIiwicmF3RGF0YSIsIm9uZVJhd0RhdGEiLCJzb3J0IiwiYSIsImIiLCJtYWtlTWFwRGF0YSIsImJhckNhdGVnb3J5R2FwIiwiZGlzdGFuY2UiLCJ4MiIsInkyIiwiZ2xvYmFsIiwieiIsInNldFRyaW1OdW0iLCJyZWdpb25TdGF5TnVtIiwicm9zZVR5cGUiLCJsYWJlbExpbmUiLCJzaGFkb3dCbHVyIiwic2hhZG93Q29sb3IiLCJ2aXN1YWxNYXAiLCJtaW4iLCJpblJhbmdlIiwiY29sb3JMaWdodG5lc3MiLCJOIiwic2hvd0xlbmd0aCIsInZhbHVlU3VtIiwib3RoZXJBcmVhIiwiZ2V0VG9wTkFyZWEiLCJzZXRSZWdpb25TdGF5TnVtIiwiYXJlYVNlbGVjdCIsInNldFZlaGljbGVUeXBlIiwiYXJlYU9wdGlvbiIsInZlaGljbGVUeXBlIiwiYmFyV2lkdGgiLCJncmFwaGljIiwiTGluZWFyR3JhZGllbnQiLCJiYXJCb3JkZXJSYWRpdXMiLCJmb250V2VpZ2h0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0s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S0FDdEI1SCxTQUFTNkcsZUFBZSxtQkFFeEIzRixFQUFVLENBQ1Z1UCxRQUFTLENBQ0xDLFFBQVMsUUFFYndFLFFBQVMsQ0FDTHRQLE9BQVFILEdBRVprSyxNQUFPLENBQ0hPLEtBQU0sV0FDTkUsVUFBVyxDQUNQekIsTUFBTSxFQUNOMEIsVUFBVyxDQUNQQyxNQUFPLE9BQ1BDLFNBQVUsUUFJdEJDLE1BQU8sQ0FDSEosVUFBVyxDQUNQekIsTUFBTSxFQUNOMEIsVUFBVyxDQUNQQyxNQUFPLE9BQ1BDLFNBQVUsUUFJdEJYLE9BQVEsQ0FDSixDQUNJTSxLQUFNLE1BQ05vSCxTQUFVLEdBQ1ZyQyxPQUFRLENBQ0paLEVBQUcsTUFDSEMsRUFBRyxRQUVQdEQsVUFBVyxDQUNQQyxPQUFRLENBQ0pYLE1BQU8sSUFBSTNJLFFBQVE0UCxRQUFRQyxlQUN2QixFQUNBLEVBQ0EsRUFDQSxFQUNBLENBQ0ksQ0FDSWhELE9BQVEsRUFDUmxFLE1BQU8sV0FFWCxDQUNJa0UsT0FBUSxFQUNSbEUsTUFBTyxhQUdmLEdBRUptSCxnQkFBaUIsQ0FBQyxHQUFJLEdBQUksRUFBRyxLQUdyQ3RHLE1BQU8sQ0FDSHhDLE1BQU0sRUFDTjRCLFNBQVUsR0FDVm1ILFdBQVksT0FDWjNKLFNBQVUsTUFDVnVDLE1BQU8sZ0JBS3ZCK0csRUFBWTNILFVBQVV4TyxHQUN0Qm5CLE9BQU9pSCxpQkFBaUIsVUFBVSxXQUM5QnFRLEVBQVlwSixjQUduQmhGLE1BQU9DLElBQ0pILFFBQVFDLElBQUlFLEtBM0Z4QmdPLEVBQVdsUSxpQkFBaUIsVUFBVSxXQUVsQ21RLEVBRGlCRCxFQUFXclksVUFLaENzWSxFQURpQkQsRUFBV3JZLE9KeUJoQ3NZIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM0KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIi8v6K6+572u5pWw5a2X5pe26ZKfXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RpbWUodGltZSkge1xyXG4gICAgaWYgKHRpbWUgPCAxMCkge1xyXG4gICAgICAgIHRpbWUgPSBcIjBcIiArIHRpbWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGltZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VGltZSgpIHtcclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBob3VyID0gZGF0ZS5nZXRIb3VycygpO1xyXG4gICAgbGV0IG1pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG4gICAgbGV0IHNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpO1xyXG4gICAgaG91ciA9IGNoZWNrVGltZShob3VyKTtcclxuICAgIG1pbnV0ZSA9IGNoZWNrVGltZShtaW51dGUpO1xyXG4gICAgc2Vjb25kID0gY2hlY2tUaW1lKHNlY29uZCk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpbWVEaXZcIikuaW5uZXJIVE1MID1cclxuICAgICAgICBob3VyICsgXCI6XCIgKyBtaW51dGUgKyBcIjpcIiArIHNlY29uZDtcclxufVxyXG5cclxuLy/orr7nva7lhbPpl63mjInpkq5cclxuZnVuY3Rpb24gc2V0Q2xvc2VQYWdlQnRuKCkge1xyXG4gICAgbGV0IGNsb3NlUGFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xvc2VQYWdlXCIpO1xyXG4gICAgY2xvc2VQYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi4vbG9naW4uaHRtbFwiO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8v6K6+572u5Li76aG15oyJ6ZKuXHJcbmZ1bmN0aW9uIHNldEhvbWVQYWdlQnRuKCkge1xyXG4gICAgbGV0IGhvbWVQYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJob21lUGFnZVwiKTtcclxuICAgIGhvbWVQYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi4vbWFpblBhZ2UuaHRtbFwiO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8v6K6+572u55uR5o6n5oyJ6ZKuXHJcbmZ1bmN0aW9uIHNldE1vbml0b3JQYWdlKCkge1xyXG4gICAgbGV0IG1vbml0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vbml0b3JcIik7XHJcbiAgICBtb25pdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi4vbW9uaXRvci5odG1sXCI7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy/orr7nva7miqXooajmjInpkq5cclxuZnVuY3Rpb24gc2V0UmVwb3J0UGFnZSgpIHtcclxuICAgIGxldCByZXBvcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlcG9ydFwiKTtcclxuICAgIHJlcG9ydC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIuL3JlcG9ydC5odG1sXCI7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEhlYWRlckJ1dHRvbnMoKSB7XHJcbiAgICBzZXRIb21lUGFnZUJ0bigpO1xyXG4gICAgc2V0TW9uaXRvclBhZ2UoKTtcclxuICAgIHNldFJlcG9ydFBhZ2UoKTtcclxuICAgIHNldENsb3NlUGFnZUJ0bigpO1xyXG59XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9fc3R5bGUtbG9hZGVyQDEuMi4xQHN0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9fY3NzLWxvYWRlckAzLjUuM0Bjc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmFtYXAtbG9nbyB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxufVxcclxcblxcclxcbi5hbWFwLWNvcHlyaWdodCB7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxufVxcclxcblxcclxcbiNtYWluIHtcXHJcXG4gICAgaGVpZ2h0OiA5MCU7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMjBweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9fc3R5bGUtbG9hZGVyQDEuMi4xQHN0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FsZXJ0LmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tb2RhbC1jb250ZW50IHtcXHJcXG4gICAgLyrlvLnnqpfnmoTovrnmoYbjgIHovrnot53jgIHog4zmma/oibLlkozpmLTlvbHnrYnmoLflvI8qL1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHNsYXRlZ3JheTtcXHJcXG4gICAgY29sb3I6IHNub3c7XFxyXFxuICAgIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXHJcXG4gICAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjIpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxyXFxuICAgIG91dGxpbmU6IDA7XFxyXFxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAzcHggOXB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAzcHggOXB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWhlYWRlciB7XFxyXFxuICAgIC8q5aS06YOoKi9cXHJcXG4gICAgbWluLWhlaWdodDogMTYuNDI4NTcxNDNweDtcXHJcXG4gICAgcGFkZGluZzogMTVweDtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU1ZTU7XFxyXFxufVxcclxcbi5tb2RhbC1oZWFkZXIgLmNsb3NlIHtcXHJcXG4gICAgLyrlhbPpl63mjInplK4qL1xcclxcbiAgICBtYXJnaW4tdG9wOiAtMnB4O1xcclxcbn1cXHJcXG4ubW9kYWwtdGl0bGUge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQzO1xcclxcbn1cXHJcXG4ubW9kYWwtYm9keSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgcGFkZGluZzogMTVweDtcXHJcXG59XFxyXFxuLm1vZGFsLWZvb3RlciB7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHg7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2U1ZTVlNTtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWZvb3RlciAuYnRuICsgLmJ0biB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XFxyXFxufVxcclxcbi5tb2RhbC1mb290ZXIgLmJ0bi1ncm91cCAuYnRuICsgLmJ0biB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbn1cXHJcXG4ubW9kYWwtZm9vdGVyIC5idG4tYmxvY2sgKyAuYnRuLWJsb2NrIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxyXFxufVxcclxcblxcclxcbi5tb2RhbCB7XFxyXFxuICAgIC8q5Zu65a6a5Zyo5rWP6KeI5Zmo5a6e546wKi9cXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICB0b3A6IDA7XFxyXFxuICAgIHJpZ2h0OiAwO1xcclxcbiAgICBib3R0b206IDA7XFxyXFxuICAgIGxlZnQ6IDA7XFxyXFxuICAgIHotaW5kZXg6IDEwNTA7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXHJcXG4gICAgb3V0bGluZTogMDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgIC8q5rC05bmz5bGF5LitKi9cXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogYXV0bztcXHJcXG4gICAgbWFyZ2luOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXHJcXG4gICAgLyrlvZPmtY/op4jlmajop4bnqpflpKfkuo43NjhweOaXtu+8jOaooeaAgeW8ueWHuueql+eahOWuveW6puS4ujYwMHB45a6e546wKi9cXHJcXG4gICAgLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgICAgICB3aWR0aDogNjAwcHg7XFxyXFxuICAgICAgICBtYXJnaW46IDMwcHggYXV0bztcXHJcXG4gICAgfVxcclxcbiAgICAubW9kYWwtY29udGVudCB7XFxyXFxuICAgICAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxyXFxuICAgIH1cXHJcXG4gICAgLm1vZGFsLXNtIHtcXHJcXG4gICAgICAgIHdpZHRoOiAzMDBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtb3BlbiB7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC1iYWNrZHJvcCB7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgdG9wOiAwO1xcclxcbiAgICByaWdodDogMDtcXHJcXG4gICAgYm90dG9tOiAwO1xcclxcbiAgICBsZWZ0OiAwO1xcclxcbiAgICB6LWluZGV4OiAxMDQwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwtYmFja2Ryb3AuZmFkZSB7XFxyXFxuICAgIGZpbHRlcjogYWxwaGEob3BhY2l0eT0wKTtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG59XFxyXFxuLm1vZGFsLWJhY2tkcm9wLmluIHtcXHJcXG4gICAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTUwKTtcXHJcXG4gICAgb3BhY2l0eTogMC41O1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwuZmFkZSAubW9kYWwtZGlhbG9nIHtcXHJcXG4gICAgLyrliqjnlLvmlYjmnpwqL1xcclxcbiAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1vdXQ7XFxyXFxuICAgIC1vLXRyYW5zaXRpb246IC1vLXRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0O1xcclxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlLW91dDtcXHJcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yNSUsIDApO1xcclxcbiAgICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yNSUsIDApO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yNSUsIDApO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kYWwuaW4gLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXHJcXG4gICAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXHJcXG59XFxyXFxuXFxyXFxuI21haW5NYXBBcmVhU2VsZWN0UGFnZUJ0biB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgei1pbmRleDogMztcXHJcXG59XFxyXFxuXFxyXFxuLyogI215bW9kYWwge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxufSAqL1xcclxcblxcclxcbi5idG4ge1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvX3N0eWxlLWxvYWRlckAxLjIuMUBzdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19jc3MtbG9hZGVyQDMuNS4zQGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sZWZ0LmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNsZWZ0TGluZSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgd2lkdGg6IDI0JTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuXFxyXFxuLmxlZnRfZGl2IHtcXHJcXG4gICAgaGVpZ2h0OiA0MiU7XFxyXFxuICAgIGJvcmRlcjogc25vdyBzb2xpZCAxcHg7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuI3RyaXBOdW1UaXRsZURpdixcXHJcXG4jbWlncmF0aW9uTWFwVGl0bGVEaXYge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHotaW5kZXg6IDI7XFxyXFxuICAgIHRvcDogY2FsYygtMTAlKTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI3RyaXBOdW1UaXRsZURpdiBzcGFuLFxcclxcbiNtaWdyYXRpb25NYXBUaXRsZURpdiBzcGFuIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBjb2xvcjogbGlnaHRza3libHVlO1xcclxcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbiNzdGF0ZVNlbGVjdEJ1dHRvbiB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOiBjYWxjKDMlKTtcXHJcXG4gICAgcmlnaHQ6IGNhbGMoMyUpO1xcclxcbiAgICB6LWluZGV4OiAyO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYjEyMmU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCBkYXJrZ3JleTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgcGFkZGluZzogMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4jdHJpcE51bURpdkJ5VGltZSxcXHJcXG4jdHJpcE51bURpdkJ5U3BhY2Uge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHdpZHRoOiBjYWxjKDEwMCUpO1xcclxcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSk7XFxyXFxufVxcclxcbiN0cmlwTnVtRGl2QnlTcGFjZSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNtaWdyYXRpb25NYXBEaXYge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHdpZHRoOiBjYWxjKDEwMCUpO1xcclxcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSk7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19zdHlsZS1sb2FkZXJAMS4yLjFAc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9fY3NzLWxvYWRlckAzLjUuM0Bjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWlkZGxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNtaWRkbGVMaW5lIHtcXHJcXG4gICAgd2lkdGg6IDUyJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuLm1pZGRsZUxpbmVEaXYge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGhlaWdodDogOTIlO1xcclxcbiAgICB3aWR0aDogODQlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogOCU7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogOCU7XFxyXFxuICAgIGJvcmRlcjogc25vdyBzb2xpZCAxcHg7XFxyXFxufVxcclxcbiNtYWluTWFwQW5kVGl0bGUge1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbiNtYWluTWFwVGl0bGVEaXYge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHotaW5kZXg6IDI7XFxyXFxuICAgIHRvcDogY2FsYygtNSUpO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG4jbWFpbk1hcFRpdGxlRGl2IHNwYW4ge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIGNvbG9yOiBsaWdodHNreWJsdWU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuI21haW5NYXBTZWxlY3RCdG4ge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHotaW5kZXg6IDI7XFxyXFxuICAgIHJpZ2h0OiBjYWxjKDEuNSUpO1xcclxcbiAgICB0b3A6IGNhbGMoMSUpO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYjEyMmU7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGRhcmtncmF5O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxufVxcclxcblxcclxcbiNtYWluTWFwRGl2IHtcXHJcXG4gICAgei1pbmRleDogMTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogY2FsYygxMDAlKTtcXHJcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUpO1xcclxcbn1cXHJcXG5cXHJcXG4jbWVzc2FnZUZsb3dBbmRDbG9zZUJ0biB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSk7XFxyXFxuICAgIGhlaWdodDogY2FsYygwJSk7XFxyXFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuI21lc3NhZ2VGbG93VGl0bGVEaXYge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHotaW5kZXg6IDI7XFxyXFxuICAgIHRvcDogY2FsYygtMTIlKTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI21lc3NhZ2VGbG93VGl0bGVEaXYgc3BhbiB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgY29sb3I6IGxpZ2h0c2t5Ymx1ZTtcXHJcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG4jbWVzc2FnZUZsb3dBcmVhTmFtZURpdiB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgei1pbmRleDogMjtcXHJcXG4gICAgdG9wOiBjYWxjKDAlKTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI21lc3NhZ2VGbG93QXJlYU5hbWVEaXYgc3BhbiB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgY29sb3I6IGxpZ2h0c2t5Ymx1ZTtcXHJcXG4gICAgZm9udC1zaXplOiAxLjFyZW07XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG5cXHJcXG4jY2xvc2VNZXNzYWdlRmxvd0RpdkJ0biB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgei1pbmRleDogMjtcXHJcXG4gICAgcmlnaHQ6IGNhbGMoMiUpO1xcclxcbiAgICB0b3A6IGNhbGMoMSUpO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuI21lc3NhZ2VGbG93RGl2IHtcXHJcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSk7XFxyXFxuICAgIGhlaWdodDogY2FsYygxMDAlKTtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9fc3R5bGUtbG9hZGVyQDEuMi4xQHN0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3JpZ2h0LmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvX2Nzcy1sb2FkZXJAMy41LjNAY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNyaWdodExpbmUge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHdpZHRoOiAyNCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbi5yaWdodF9kaXYge1xcclxcbiAgICBoZWlnaHQ6IDQyJTtcXHJcXG4gICAgYm9yZGVyOiBzbm93IHNvbGlkIDFweDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4jcmVnaW9uU3RheU51bVRpdGxlRGl2LFxcclxcbiN2ZWhpY2xlVHlwZVRpdGxlRGl2IHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB6LWluZGV4OiAyO1xcclxcbiAgICB0b3A6IGNhbGMoLTEwJSk7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNyZWdpb25TdGF5TnVtVGl0bGVEaXYgc3BhbixcXHJcXG4jdmVoaWNsZVR5cGVUaXRsZURpdiBzcGFuIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBjb2xvcjogbGlnaHRza3libHVlO1xcclxcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbiNyZWdpb25TdGF5TnVtRGl2IHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogY2FsYygxMDAlKTtcXHJcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUpO1xcclxcbn1cXHJcXG5cXHJcXG4jYXJlYVNlbGVjdERpdiB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB0b3A6IGNhbGMoMyUpO1xcclxcbiAgICByaWdodDogY2FsYygzJSk7XFxyXFxuICAgIHotaW5kZXg6IDI7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI2FyZWFTZWxlY3REaXYgc3BhbiB7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuI2FyZWFTZWxlY3REaXYgc2VsZWN0IHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYjEyMmU7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZTtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgZGFya2dyYXk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuI3ZlaGljbGVUeXBlRGl2IHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogY2FsYygxMDAlKTtcXHJcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUpO1xcclxcbn1cXHJcXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19zdHlsZS1sb2FkZXJAMS4yLjFAc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9fY3NzLWxvYWRlckAzLjUuM0Bjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaG9ybi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19jc3MtbG9hZGVyQDMuNS4zQGNzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaG9ybiB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmhvcm4gPiBkaXYge1xcclxcbiAgICB3aWR0aDogMTBweDtcXHJcXG4gICAgaGVpZ2h0OiAxMHB4O1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxufVxcclxcblxcclxcbi5ob3JuIC5sdCB7XFxyXFxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCAjMDBkM2U3O1xcclxcbiAgICBib3JkZXItbGVmdDogM3B4IHNvbGlkICMwMGQzZTc7XFxyXFxuICAgIGxlZnQ6IC0zcHg7XFxyXFxuICAgIHRvcDogLTNweDtcXHJcXG59XFxyXFxuXFxyXFxuLmhvcm4gLnJ0IHtcXHJcXG4gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICMwMGQzZTc7XFxyXFxuICAgIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMwMGQzZTc7XFxyXFxuICAgIHJpZ2h0OiAtM3B4O1xcclxcbiAgICB0b3A6IC0zcHg7XFxyXFxufVxcclxcblxcclxcbi5ob3JuIC5yYiB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjMDBkM2U3O1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjMDBkM2U3O1xcclxcbiAgICByaWdodDogLTNweDtcXHJcXG4gICAgYm90dG9tOiAtM3B4O1xcclxcbn1cXHJcXG5cXHJcXG4uaG9ybiAubGIge1xcclxcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzAwZDNlNztcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjMDBkM2U3O1xcclxcbiAgICBsZWZ0OiAtM3B4O1xcclxcbiAgICBib3R0b206IC0zcHg7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvX3N0eWxlLWxvYWRlckAxLjIuMUBzdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19jc3MtbG9hZGVyQDMuNS4zQGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9xdWl0X2J0bi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL19jc3MtbG9hZGVyQDMuNS4zQGNzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucXVpdF9idG46OmJlZm9yZSxcXHJcXG4ucXVpdF9idG46OmFmdGVyIHtcXHJcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOiAxN3B4O1xcclxcbiAgICBsZWZ0OiAxN3B4O1xcclxcbn1cXHJcXG4ucXVpdF9idG46OmJlZm9yZSB7XFxyXFxuICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgIGJvcmRlcjogM3B4IHNvbGlkICM2MmZmZmQ7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG59XFxyXFxuLnF1aXRfYnRuOjphZnRlciB7XFxyXFxuICAgIHRvcDogMTRweDtcXHJcXG4gICAgbGVmdDogMjZweDtcXHJcXG4gICAgd2lkdGg6IDNweDtcXHJcXG4gICAgaGVpZ2h0OiAxM3B4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAycHgvNHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjJmZmZkO1xcclxcbiAgICAvKiBib3gtc2hhZG93OiAwIDAgMCA0cHggI2ZmZjsgKi9cXHJcXG59XFxyXFxuLnF1aXRfYnRuIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBsZWZ0OiAtNTBweDtcXHJcXG4gICAgdG9wOiAtMTVweDtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsImV4cG9ydCBsZXQgZ2VvQ29vcmRNYXAgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCLmsojpmLPluIJcIixcclxuICAgICAgICBsbmc6IDEyMy40MyxcclxuICAgICAgICBsYXQ6IDQxLjgsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi5ZKM5bmz5Yy6XCIsXHJcbiAgICAgICAgbG5nOiAxMjMuNCxcclxuICAgICAgICBsYXQ6IDQxLjc3LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIuayiOays+WMulwiLFxyXG4gICAgICAgIGxuZzogMTIzLjQ1LFxyXG4gICAgICAgIGxhdDogNDEuNzksXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi5aSn5Lic5Yy6XCIsXHJcbiAgICAgICAgbG5nOiAxMjMuNSxcclxuICAgICAgICBsYXQ6IDQxLjg1LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIueah+WnkeWMulwiLFxyXG4gICAgICAgIGxuZzogMTIzLjQ1LFxyXG4gICAgICAgIGxhdDogNDEuODYsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi6ZOB6KW/5Yy6XCIsXHJcbiAgICAgICAgbG5nOiAxMjMuMTcsXHJcbiAgICAgICAgbGF0OiA0MS43LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIuS6jua0quWMulwiLFxyXG4gICAgICAgIGxuZzogMTIzLjMsXHJcbiAgICAgICAgbGF0OiA0MS44OCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCLovr3kuK3ljLpcIixcclxuICAgICAgICBsbmc6IDEyMi43MixcclxuICAgICAgICBsYXQ6IDQxLjUyLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIuW6t+W5s+WOv1wiLFxyXG4gICAgICAgIGxuZzogMTIzLjM1LFxyXG4gICAgICAgIGxhdDogNDIuNzUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi5rOV5bqT5Y6/XCIsXHJcbiAgICAgICAgbG5nOiAxMjMuNCxcclxuICAgICAgICBsYXQ6IDQyLjUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi5paw5rCR5biCXCIsXHJcbiAgICAgICAgbG5nOiAxMjIuODIsXHJcbiAgICAgICAgbGF0OiA0Mi4wLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIuiLj+WutuWxr+WMulwiLFxyXG4gICAgICAgIGxuZzogMTIzLjMzLFxyXG4gICAgICAgIGxhdDogNDEuNjcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwi5rKI5YyX5paw5Yy6XCIsXHJcbiAgICAgICAgbG5nOiAxMjMuNTgsXHJcbiAgICAgICAgbGF0OiA0MS45MSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCLmtZHljZfljLpcIixcclxuICAgICAgICBsbmc6IDEyMy42MixcclxuICAgICAgICBsYXQ6IDQxLjc3LFxyXG4gICAgfSxcclxuXTtcclxuIiwiaW1wb3J0IHtcclxuICAgIHNob3dEYXRhVG9NZXNzYWdlRmxvdyxcclxuICAgIGtleVBvaW50T2JqTGlzdCxcclxuICAgIGtleVBvaW50U2VsZWN0TGlzdCxcclxufSBmcm9tIFwiLi9tYWluTWFwLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBjaGVja1RpbWUgfSBmcm9tIFwiLi4vLi4vLi4vaGVhZGVyL2hlYWRlci5qc1wiO1xyXG5cclxuZXhwb3J0IGxldCBtZXNzYWdlRmxvdyA9IGVjaGFydHMuaW5pdChcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZUZsb3dEaXZcIilcclxuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRNZXNzYWdlRmxvdygpIHtcclxuICAgIGxldCBkYXRlID0gW107XHJcbiAgICBsZXQgZGF0YSA9IFtdO1xyXG5cclxuICAgIC8v5qih5ouf5pWw5o2uXHJcbiAgICAvLyBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgICAgYWRkRGF0YSh0cnVlKTtcclxuICAgIC8vICAgICBtZXNzYWdlRmxvdy5zZXRPcHRpb24oe1xyXG4gICAgLy8gICAgICAgICB4QXhpczoge1xyXG4gICAgLy8gICAgICAgICAgICAgZGF0YTogZGF0ZSxcclxuICAgIC8vICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbmFtZTogXCLmlbDph49cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH0sIDEwMDApO1xyXG5cclxuICAgIC8vc2hpZnTkuLpmYWxzZe+8jOaVsOe7hOmVv+W6pisx77yb5Li6dHJ1Ze+8jOaVsOe7hOmVv+W6puS4jeWPmFxyXG4gICAgZnVuY3Rpb24gYWRkRGF0YShzaGlmdCwgbmV3RGF0YSkge1xyXG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIG5vdyA9IFtcclxuICAgICAgICAgICAgY2hlY2tUaW1lKG5vdy5nZXRIb3VycygpKSxcclxuICAgICAgICAgICAgY2hlY2tUaW1lKG5vdy5nZXRNaW51dGVzKCkpLFxyXG4gICAgICAgICAgICBjaGVja1RpbWUobm93LmdldFNlY29uZHMoKSksXHJcbiAgICAgICAgXS5qb2luKFwiOlwiKTtcclxuICAgICAgICBkYXRlLnB1c2gobm93KTtcclxuICAgICAgICBkYXRhLnB1c2gobmV3RGF0YSk7XHJcbiAgICAgICAgaWYgKHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGRhdGUuc2hpZnQoKTtcclxuICAgICAgICAgICAgZGF0YS5zaGlmdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8v55Sf5Lqn546v5aKDXHJcbiAgICBnZXRNZXNzYWdlRmxvd0RhdGEoKTtcclxuICAgIGZ1bmN0aW9uIGdldE1lc3NhZ2VGbG93RGF0YSgpIHtcclxuICAgICAgICBsZXQgY2xpY2sgPSAwO1xyXG4gICAgICAgIGxldCBsYXN0RGF0YU9iaiA9IHsgbmFtZTogXCJcIiB9O1xyXG4gICAgICAgIGxldCBvdmVyRmxvd05hbWVMaXN0ID0gW107XHJcbiAgICAgICAgbGV0IGhvc3QgPSBcImh0dHA6Ly8xMjIuNTEuMTkuMTYwOjgwODBcIjtcclxuICAgICAgICBsZXQgU29ja2V0ID0gbmV3IFNvY2tKUyhob3N0ICsgXCIvaGh1Y1wiKTtcclxuICAgICAgICBsZXQgU3RvbXBDbGllbnQgPSBTdG9tcC5vdmVyKFNvY2tldCk7XHJcbiAgICAgICAgU3RvbXBDbGllbnQuY29ubmVjdCh7fSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBTdG9tcENsaWVudC5zdWJzY3JpYmUoXCIvdXNlci9wbGFjZS9ob3RwbGFjZVwiLCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGF0YU9iaiA9IEpTT04ucGFyc2UocmVzLmJvZHkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vb3ZlcmZsb3flj5HnlJ/vvIzorr7nva7kuLvlm77pooToraZcclxuICAgICAgICAgICAgICAgIGlmIChuZXdEYXRhT2JqLm92ZXJmbG93ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5UG9pbnRPYmpMaXN0LmZvckVhY2goZnVuY3Rpb24gKGtleVBvaW50T2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlQb2ludE9iai5uYW1lID09PSBuZXdEYXRhT2JqLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJGbG93TmFtZUxpc3QucHVzaChrZXlQb2ludE9iai5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVBvaW50T2JqLm92ZXJmbG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNYXBVSS5sb2FkVUkoW1wib3ZlcmxheS9TdmdNYXJrZXJcIl0sIGZ1bmN0aW9uIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdmdNYXJrZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVBvaW50T2JqLm1hcmtlci5zZXRTdmdTaGFwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN2Z01hcmtlci5TaGFwZS5UcmlhbmdsZUZsYWdQaW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNSwgLy/pq5jluqZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2lkdGg6ICoqLCAvL+S4jeaMh+WumuaXtuS8mue7tOaMgem7mOiupOeahOWuvemrmOavlFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcIm9yYW5nZXJlZFwiLCAvL+Whq+WFheiJslxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDEsIC8v5o+P6L655a695bqmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogXCIjNjY2XCIsIC8v5o+P6L656aKc6ImyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5UG9pbnRPYmoubWFya2VyLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9vdmVyZmxvd+ino+mZpFxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlckZsb3dOYW1lTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChvdmVyRmxvd05hbWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdmVyRmxvd05hbWUgPT09IG5ld0RhdGFPYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlckZsb3dOYW1lTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5UG9pbnRPYmpMaXN0LmZvckVhY2goZnVuY3Rpb24gKGtleVBvaW50T2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleVBvaW50T2JqLm5hbWUgPT09IG92ZXJGbG93TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+Wwhue6ouiJsuWwj+aXl+makOiXj1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlQb2ludE9iai5vdmVyZmxvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTWFwVUkubG9hZFVJKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wib3ZlcmxheS9TdmdNYXJrZXJcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoU3ZnTWFya2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5UG9pbnRPYmoubWFya2VyLnNldFN2Z1NoYXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU3ZnTWFya2VyLlNoYXBlLlRyaWFuZ2xlRmxhZ1BpbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLCAvL+mrmOW6plxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2lkdGg6ICoqLCAvL+S4jeaMh+WumuaXtuS8mue7tOaMgem7mOiupOeahOWuvemrmOavlFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzcHJpbmdncmVlblwiLCAvL+Whq+WFheiJslxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxLCAvL+aPj+i+ueWuveW6plxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcIiM2NjZcIiwgLy/mj4/ovrnpopzoibJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVBvaW50T2JqLm1hcmtlci5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6Iul5p+Q54Ot54K55Yy65Z+f6KKr55So5oi36YCJ5oup5pi+56S677yM5YiZ5LuN54S25bCG6buE6Imy5bCP5peX5pi+56S65Zyo5Li75Zu+5LiKXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVBvaW50U2VsZWN0TGlzdC5pbmRleE9mKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVBvaW50T2JqLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgIT09IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5UG9pbnRPYmoubWFya2VyLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlRmxvdy5oaWRlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgLy/orr7nva7kuLvlm77kuIvmlrnnqpflj6NcclxuICAgICAgICAgICAgICAgIGlmIChuZXdEYXRhT2JqLm5hbWUgPT09IHNob3dEYXRhVG9NZXNzYWdlRmxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5qOA5rWL5Zyw5ZCN5piv5ZCm5Y+Y5YyWXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0RhdGFPYmoubmFtZSA9PT0gbGFzdERhdGFPYmoubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljaysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WFiOWFheWFpeS4g+S4quaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2sgPCA3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREYXRhKGZhbHNlLCBuZXdEYXRhT2JqLm5vd051bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREYXRhKHRydWUsIG5ld0RhdGFPYmoubm93TnVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRmxvdy5zZXRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLmlbDph49cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2sgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGF0YShmYWxzZSwgbmV3RGF0YU9iai5ub3dOdW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+WMlm9y6YeN5paw6K6+572u6aKE6K2m57q/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VGbG93LnNldE9wdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBcIjIwJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IFwiMTAlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IFwiMTAlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBcIjEyJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhBeGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYXRlZ29yeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNMYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5QXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvdW5kYXJ5R2FwOiBbMCwgXCI1MCVcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNMYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogXCJheGlzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIuaVsOmHj1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogOCwgLy/mi5DngrnlnIbnmoTlpKflsI9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zeW1ib2w6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2s6IFwienp6XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtMaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZzZGZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeUF4aXM6IG5ld0RhdGFPYmoubWF4bnVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMkI5MDhGXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3c6dHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdERhdGFPYmogPSBuZXdEYXRhT2JqO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtZXNzYWdlRmxvdy5yZXNpemUoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNZXNzYWdlRmxvd0Nsb3NlQnRuKCkge1xyXG4gICAgbGV0IGNsb3NlTWVzc2FnZUZsb3dEaXZCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICBcImNsb3NlTWVzc2FnZUZsb3dEaXZCdG5cIlxyXG4gICAgKTtcclxuICAgIGxldCBtYWluTWFwQW5kVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5NYXBBbmRUaXRsZVwiKTtcclxuICAgIGxldCBtZXNzYWdlRmxvd0FuZENsb3NlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgICAgXCJtZXNzYWdlRmxvd0FuZENsb3NlQnRuXCJcclxuICAgICk7XHJcblxyXG4gICAgY2xvc2VNZXNzYWdlRmxvd0RpdkJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG1lc3NhZ2VGbG93QW5kQ2xvc2VCdG4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIG1lc3NhZ2VGbG93QW5kQ2xvc2VCdG4uc3R5bGUuaGVpZ2h0ID0gXCIwJVwiO1xyXG4gICAgICAgIG1haW5NYXBBbmRUaXRsZS5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICBzaG93RGF0YVRvTWVzc2FnZUZsb3cgPSBcIlwiO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnNldE1lc3NhZ2VGbG93Q2xvc2VCdG4oKTtcclxuIiwiaW1wb3J0IHsgZ2VvQ29vcmRNYXAgfSBmcm9tIFwiLi4vY2hhcnRzT3B0aW9uL2dlb0Nvb3JkTWFwLmpzXCI7XHJcbmltcG9ydCB7IG1lc3NhZ2VGbG93IH0gZnJvbSBcIi4uL21pZGRsZS9tZXNzYWdlRmxvdy5qc1wiO1xyXG5cclxuZXhwb3J0IGxldCBzaG93RGF0YVRvTWVzc2FnZUZsb3cgPSBcIlwiO1xyXG5leHBvcnQgbGV0IGtleVBvaW50T2JqTGlzdCA9IFtdO1xyXG4vL+eUqOaIt+eCueWHu2NoZWNrYm946YCJ5oup55qE5Yy65Z+f5YiX6KGoXHJcbmV4cG9ydCBsZXQga2V5UG9pbnRTZWxlY3RMaXN0ID0gW107XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0TWFpbk1hcCgpIHtcclxuICAgIGxldCBtYXAgPSBuZXcgQU1hcC5NYXAoXCJtYWluTWFwRGl2XCIsIHtcclxuICAgICAgICB6b29tOiA3LjUsXHJcbiAgICAgICAgem9vbXM6IFs3LjUsIDE2XSxcclxuICAgICAgICBjZW50ZXI6IFsxMjMuMzgzMzMsIDQyLjBdLFxyXG4gICAgICAgIHBpdGNoOiAwLFxyXG4gICAgICAgIC8v6K6+572u5Zyw5Zu+6IOM5pmv5Zu+XHJcbiAgICAgICAgbWFwU3R5bGU6IFwiYW1hcDovL3N0eWxlcy80MDAzNTU3MWZhOWZkZDA1YTI2ZmUxYjA1ZjQ4ZmRjOVwiLFxyXG4gICAgfSk7XHJcbiAgICAvLyBtYXAuc2V0RGVmYXVsdEN1cnNvcihcInBvaW50ZXJcIik7XHJcblxyXG4gICAgLy/lsIbmsojpmLPlkITkuKrljLrnu5nliJLliIblh7rmnaVcclxuICAgIGxldCBhcmVhID0gW1xyXG4gICAgICAgIFwi5ZKM5bmz5Yy6XCIsXHJcbiAgICAgICAgXCLovr3kuK3ljLpcIixcclxuICAgICAgICBcIumTgeilv+WMulwiLFxyXG4gICAgICAgIFwi5paw5rCR5biCXCIsXHJcbiAgICAgICAgXCLoi4/lrrblsa/ljLpcIixcclxuICAgICAgICBcIuayiOays+WMulwiLFxyXG4gICAgICAgIFwi5bq35bmz5Y6/XCIsXHJcbiAgICAgICAgXCLms5XlupPljr9cIixcclxuICAgICAgICBcIuayiOWMl+aWsOWMulwiLFxyXG4gICAgICAgIFwi5LqO5rSq5Yy6XCIsXHJcbiAgICAgICAgXCLmtZHljZfljLpcIixcclxuICAgICAgICBcIueah+WnkeWMulwiLFxyXG4gICAgICAgIFwi5aSn5Lic5Yy6XCIsXHJcbiAgICBdO1xyXG5cclxuICAgIG1haW5NYXBJbml0KCk7XHJcbiAgICBmdW5jdGlvbiBtYWluTWFwSW5pdCgpIHtcclxuICAgICAgICBhcmVhLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIGFsZXJ0KHZhbHVlKTtcclxuICAgICAgICAgICAgbmV3IEFNYXAuRGlzdHJpY3RTZWFyY2goe1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogXCJhbGxcIixcclxuICAgICAgICAgICAgICAgIHN1YmRpc3RyaWN0OiAwLFxyXG4gICAgICAgICAgICB9KS5zZWFyY2godmFsdWUsIGZ1bmN0aW9uIChzdGF0dXMsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgLy8g5aSW5aSa6L655b2i5Z2Q5qCH5pWw57uE5ZKM5YaF5aSa6L655b2i5Z2Q5qCH5pWw57uEXHJcbiAgICAgICAgICAgICAgICB2YXIgaG9sZXMgPSByZXN1bHQuZGlzdHJpY3RMaXN0WzBdLmJvdW5kYXJpZXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9seWdvbiA9IG5ldyBBTWFwLlBvbHlnb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhMOiBob2xlcyxcclxuICAgICAgICAgICAgICAgICAgICAvL+e6v+adoeminOiJsu+8jOS9v+eUqDE26L+b5Yi26aKc6Imy5Luj56CB6LWL5YC844CC6buY6K6k5YC85Li6IzAwNjYwMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0cm9rZUNvbG9yOiBcInJnYigyMCwxNjQsMTczKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcInJnYigxNDcsIDIzNSwgMjQ4KVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSxcclxuICAgICAgICAgICAgICAgICAgICAvL+i9ruW7k+e6v+mAj+aYjuW6pu+8jOWPluWAvOiMg+WbtFswLDFd77yMMOihqOekuuWujOWFqOmAj+aYju+8jDHooajnpLrkuI3pgI/mmI7jgILpu5jorqTkuLowLjlcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VPcGFjaXR5OiAwLjYsXHJcbiAgICAgICAgICAgICAgICAgICAgLy/ova7lu5Pnur/moLflvI/vvIzlrp7nur86c29saWTvvIzomZrnur86ZGFzaGVkXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IFwic29saWRcIixcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk6IFsxMCwgMiwgMTBdLFxyXG4gICAgICAgICAgICAgICAgICAgIC8v5aSa6L655b2i5aGr5YWF6aKc6Imy77yM5L2/55SoMTbov5vliLbpopzoibLku6PnoIHotYvlgLzvvIzlpoLvvJojRkZBQTAwXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcIiMwQzFGMzRcIixcclxuICAgICAgICAgICAgICAgICAgICAvL+Wkmui+ueW9ouWhq+WFhemAj+aYjuW6pu+8jOWPluWAvOiMg+WbtFswLDFd77yMMOihqOekuuWujOWFqOmAj+aYju+8jDHooajnpLrkuI3pgI/mmI7jgILpu5jorqTkuLowLjlcclxuICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcG9seWdvbi5zZXRQYXRoKGhvbGVzKTtcclxuICAgICAgICAgICAgICAgIG1hcC5hZGQocG9seWdvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL+WwhuayiOmYs+i+ueeVjOS7peWklumakOiXj1xyXG4gICAgICAgIG5ldyBBTWFwLkRpc3RyaWN0U2VhcmNoKHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uczogXCJhbGxcIixcclxuICAgICAgICAgICAgc3ViZGlzdHJpY3Q6IDAsXHJcbiAgICAgICAgfSkuc2VhcmNoKFwi5rKI6ZizXCIsIGZ1bmN0aW9uIChzdGF0dXMsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAvLyDlpJblpJrovrnlvaLlnZDmoIfmlbDnu4TlkozlhoXlpJrovrnlvaLlnZDmoIfmlbDnu4RcclxuICAgICAgICAgICAgdmFyIG91dGVyID0gW1xyXG4gICAgICAgICAgICAgICAgbmV3IEFNYXAuTG5nTGF0KC0zNjAsIDkwLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgIG5ldyBBTWFwLkxuZ0xhdCgtMzYwLCAtOTAsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgbmV3IEFNYXAuTG5nTGF0KDM2MCwgLTkwLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgIG5ldyBBTWFwLkxuZ0xhdCgzNjAsIDkwLCB0cnVlKSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgdmFyIGhvbGVzID0gcmVzdWx0LmRpc3RyaWN0TGlzdFswXS5ib3VuZGFyaWVzO1xyXG4gICAgICAgICAgICB2YXIgcGF0aEFycmF5ID0gW291dGVyXTtcclxuICAgICAgICAgICAgcGF0aEFycmF5LnB1c2guYXBwbHkocGF0aEFycmF5LCBob2xlcyk7XHJcbiAgICAgICAgICAgIHZhciBwb2x5Z29uID0gbmV3IEFNYXAuUG9seWdvbih7XHJcbiAgICAgICAgICAgICAgICBwYXRoTDogcGF0aEFycmF5LFxyXG4gICAgICAgICAgICAgICAgLy/nur/mnaHpopzoibLvvIzkvb/nlKgxNui/m+WItuminOiJsuS7o+eggei1i+WAvOOAgum7mOiupOWAvOS4uiMwMDY2MDBcclxuICAgICAgICAgICAgICAgIC8vIHN0cm9rZUNvbG9yOiBcInJnYigyMCwxNjQsMTczKVwiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFwicmdiKDE0NywgMjM1LCAyNDgpXCIsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDIsXHJcbiAgICAgICAgICAgICAgICAvL+i9ruW7k+e6v+mAj+aYjuW6pu+8jOWPluWAvOiMg+WbtFswLDFd77yMMOihqOekuuWujOWFqOmAj+aYju+8jDHooajnpLrkuI3pgI/mmI7jgILpu5jorqTkuLowLjlcclxuICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuOSxcclxuICAgICAgICAgICAgICAgIC8v5aSa6L655b2i5aGr5YWF6aKc6Imy77yM5L2/55SoMTbov5vliLbpopzoibLku6PnoIHotYvlgLzvvIzlpoLvvJojRkZBQTAwXHJcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3I6IFwiIzBDMUYzNFwiLFxyXG4gICAgICAgICAgICAgICAgLy/lpJrovrnlvaLloavlhYXpgI/mmI7luqbvvIzlj5blgLzojIPlm7RbMCwxXe+8jDDooajnpLrlrozlhajpgI/mmI7vvIwx6KGo56S65LiN6YCP5piO44CC6buY6K6k5Li6MC45XHJcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgIC8v6L2u5buT57q/5qC35byP77yM5a6e57q/OnNvbGlk77yM6Jma57q/OmRhc2hlZFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IFwic29saWRcIixcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheTogWzEwLCAyLCAxMF0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwb2x5Z29uLnNldFBhdGgocGF0aEFycmF5KTtcclxuICAgICAgICAgICAgbWFwLmFkZChwb2x5Z29uKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy/ljLrln5/ngrnmoIforrDliJ3lp4vljJZcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlb0Nvb3JkTWFwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZ2VvQ29vcmRNYXBbaV07XHJcbiAgICAgICAgICAgIGxldCBjZW50ZXIgPSBuZXcgQU1hcC5MbmdMYXQoZWxlbWVudC5sbmcsIGVsZW1lbnQubGF0KTtcclxuICAgICAgICAgICAgbGV0IGNpcmNsZSA9IG5ldyBBTWFwLkNpcmNsZSh7XHJcbiAgICAgICAgICAgICAgICBtYXA6IG1hcCxcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogY2VudGVyLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA0MDAsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogXCIjNjY2XCIsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDAuMSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuNSxcclxuICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMixcclxuICAgICAgICAgICAgICAgIHpJbmRleDogMTEsXHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2lyY2xlLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBBTWFwLkluZm9XaW5kb3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGVsZW1lbnQubmFtZSxcclxuICAgICAgICAgICAgICAgIH0pLm9wZW4obWFwLCBlLmxuZ2xhdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vd2Vic29ja2V06I635Y+W54Ot5Yqb5Zu+5pWw5o2u77yM5bm25riy5p+T6L+b5YWl54Ot5Yqb5Zu+XHJcbiAgICBmdW5jdGlvbiBnZXRSZWdpb25TdGF5TnVtRGF0YSgpIHtcclxuICAgICAgICBsZXQgaG9zdCA9IFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MFwiO1xyXG4gICAgICAgIGxldCBTb2NrZXQgPSBuZXcgU29ja0pTKGhvc3QgKyBcIi9oaHVjXCIpO1xyXG4gICAgICAgIGxldCBTdG9tcENsaWVudCA9IFN0b21wLm92ZXIoU29ja2V0KTtcclxuICAgICAgICBTdG9tcENsaWVudC5jb25uZWN0KHt9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIFN0b21wQ2xpZW50LnN1YnNjcmliZShcIi91c2VyL21hcC9oZWF0bWFwXCIsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpO1xyXG4gICAgICAgICAgICAgICAgbWFwLnBsdWdpbihbXCJBTWFwLkhlYXRtYXBcIl0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaGVhdG1hcCA9IG5ldyBBTWFwLkhlYXRtYXAobWFwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTUsIC8v57uZ5a6a5Y2K5b6EXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IFswLCAwLjhdLCAvL+eDreWKm+WbvumAj+aYjuW6plxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYXRtYXAuc2V0RGF0YVNldCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZ2V0UmVnaW9uU3RheU51bURhdGEoKTtcclxuXHJcbiAgICBsZXQga2V5UG9pbnREaWN0ID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCLnu7TljY7llYbkuJrlub/lnLpcIixcclxuICAgICAgICAgICAgbG5nOiAxMjMuNDA0MDUyLFxyXG4gICAgICAgICAgICBsYXQ6IDQxLjgyOTQ5NCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCLlhavkuIDlhazlm61cIixcclxuICAgICAgICAgICAgbG5nOiAxMjMuNDMxMzk5LFxyXG4gICAgICAgICAgICBsYXQ6IDQxLjgwNzkyNCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCLmsojpmLPmlYXlrqtcIixcclxuICAgICAgICAgICAgbG5nOiAxMjMuNDYyMjEsXHJcbiAgICAgICAgICAgIGxhdDogNDEuODAzMjgyLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIuayiOmYs+S4reihl1wiLFxyXG4gICAgICAgICAgICBsbmc6IDEyMy40NjA2MDUsXHJcbiAgICAgICAgICAgIGxhdDogNDEuODA3MzIyLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIuayiOmYs+ilv+a5lumjjuaZr+WMulwiLFxyXG4gICAgICAgICAgICBsbmc6IDEyMi44ODk2MTcsXHJcbiAgICAgICAgICAgIGxhdDogNDEuNzY1OTQ2LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIuayiOmYs+WbveWutuajruael+WFrOWbrVwiLFxyXG4gICAgICAgICAgICBsbmc6IDEyMy43Mjg4OTcsXHJcbiAgICAgICAgICAgIGxhdDogNDIuMDI4ODAyLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIuayiOmYs+aAquWdoemjjuaZr+WMulwiLFxyXG4gICAgICAgICAgICBsbmc6IDEyMy42NDcyODMsXHJcbiAgICAgICAgICAgIGxhdDogNDIuMDY3NTcxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIuaWsOawkea4heecn+WvulwiLFxyXG4gICAgICAgICAgICBsbmc6IDEyMi44Mzc5MixcclxuICAgICAgICAgICAgbGF0OiA0Mi4wMDAxNjEsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwi6LGq5p6X6LSt54mp5Lit5b+DXCIsXHJcbiAgICAgICAgICAgIGxuZzogMTIyLjczNzk4OCxcclxuICAgICAgICAgICAgbGF0OiA0MS41MTgyNDIsXHJcbiAgICAgICAgfSxcclxuICAgIF07XHJcbiAgICAvL+aehOW7uuaJgOacieeDreeCueWMuuWfn+eahG5hbWXliJfooahcclxuICAgIGxldCBrZXlQb2ludE5hbWVMaXN0ID0gW107XHJcbiAgICBrZXlQb2ludERpY3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBrZXlQb2ludE5hbWVMaXN0LnB1c2godmFsdWUubmFtZSk7XHJcbiAgICB9KTtcclxuICAgIGxldCBvcmlEYXRhID0ge1xyXG4gICAgICAgIHBsYWNlczoga2V5UG9pbnROYW1lTGlzdCxcclxuICAgIH07XHJcblxyXG4gICAgLy/ng63ngrnljLrln5/lj5HpgIHliLDmnI3liqHnq69cclxuICAgIGZldGNoKFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MC9wdXRQbGFjZXNcIiwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsIC8vIG9yICdQVVQnXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkob3JpRGF0YSksIC8vIGRhdGEgY2FuIGJlIGBzdHJpbmdgIG9yIHtvYmplY3R9IVxyXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSksXHJcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8v6YeN54K55Yy65Z+f5Yid5aeL5YyWXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleVBvaW50RGljdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBlbGVtZW50ID0ga2V5UG9pbnREaWN0W2ldO1xyXG4gICAgICAgIGxldCBuYW1lID0gZWxlbWVudC5uYW1lO1xyXG4gICAgICAgIGxldCBjZW50ZXIgPSBuZXcgQU1hcC5MbmdMYXQoZWxlbWVudC5sbmcsIGVsZW1lbnQubGF0KTtcclxuICAgICAgICBBTWFwVUkubG9hZFVJKFtcIm92ZXJsYXkvU3ZnTWFya2VyXCJdLCBmdW5jdGlvbiAoU3ZnTWFya2VyKSB7XHJcbiAgICAgICAgICAgIGlmICghU3ZnTWFya2VyLnN1cHBvcnRTdmcpIHtcclxuICAgICAgICAgICAgICAgIC8v5b2T5YmN546v5aKD5bm25LiN5pSv5oyBU1ZH77yM5q2k5pe2U3ZnTWFya2Vy5Lya5Zue6YCA5Yiw54i257G777yM5Y2zU2ltcGxlTWFya2VyXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8v5Yib5bu65LiA5Liqc2hhcGXlrp7kvovvvIzmr5TlpoLmsLTmu7TnirZcclxuICAgICAgICAgICAgbGV0IHNoYXBlID0gbmV3IFN2Z01hcmtlci5TaGFwZS5UcmlhbmdsZUZsYWdQaW4oe1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMCwgLy/pq5jluqZcclxuICAgICAgICAgICAgICAgIC8vd2lkdGg6ICoqLCAvL+S4jeaMh+WumuaXtuS8mue7tOaMgem7mOiupOeahOWuvemrmOavlFxyXG4gICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcInNwcmluZ2dyZWVuXCIsIC8v5aGr5YWF6ImyXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMSwgLy/mj4/ovrnlrr3luqZcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcIiM2NjZcIiwgLy/mj4/ovrnpopzoibJcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL+WIqeeUqOivpXNoYXBl5p6E5bu6U3ZnTWFya2VyXHJcbiAgICAgICAgICAgIGxldCBtYXJrZXIgPSBuZXcgU3ZnTWFya2VyKFxyXG4gICAgICAgICAgICAgICAgLy/nrKzkuIDkuKrlj4LmlbDkvKDlhaVzaGFwZeWunuS+i1xyXG4gICAgICAgICAgICAgICAgc2hhcGUsXHJcbiAgICAgICAgICAgICAgICAvL+esrOS6jOS4quWPguaVsOS4ulNpbXBsZU1hcmtlcueahOaehOmAoOWPguaVsO+8iGljb25TdHlsZemZpOWklu+8iVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dQb3NpdGlvblBvaW50OiB0cnVlLCAvL+aYvuekuuWumuS9jeeCuVxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBjZW50ZXIsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGxldCBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXHJcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogZmFsc2UsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBrZXlQb2ludE9iakxpc3QucHVzaChvYmopO1xyXG4gICAgICAgICAgICBtYXJrZXIub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy/orr7nva7mtojmga/lvLnnqpdcclxuICAgICAgICAgICAgICAgIG5ldyBBTWFwLkluZm9XaW5kb3coe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICB9KS5vcGVuKG1hcCwgZS5sbmdsYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5pi+56S65Li75Zu+5LiL5pa556qX5Y+jIOiwg+aVtOS4u+WbvuWkp+Wwj1xyXG4gICAgICAgICAgICAgICAgbGV0IG1haW5NYXBBbmRUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWFpbk1hcEFuZFRpdGxlXCJcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZUZsb3dBbmRDbG9zZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWVzc2FnZUZsb3dBbmRDbG9zZUJ0blwiXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2VGbG93QXJlYU5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2VGbG93QXJlYU5hbWVcIlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VGbG93QXJlYU5hbWUuaW5uZXJIVE1MID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VGbG93QW5kQ2xvc2VCdG4uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VGbG93QW5kQ2xvc2VCdG4uc3R5bGUuaGVpZ2h0ID0gXCIzMCVcIjtcclxuICAgICAgICAgICAgICAgIG1haW5NYXBBbmRUaXRsZS5zdHlsZS5oZWlnaHQgPSBcIjcwJVwiO1xyXG4gICAgICAgICAgICAgICAgLy9qc+WKqOaAgeaUueWPmOS6hueItuWuueWZqGRpduWuvemrmO+8jOaJi+WKqOWIt+aWsOWbvuihqOS9v+WFtumAguW6lOWuueWZqFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUZsb3cucmVzaXplKCk7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlRmxvdy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgc2hvd0RhdGFUb01lc3NhZ2VGbG93ID0gbmFtZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1hcmtlci5oaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/kuIvpnaLnmoTorr7nva7lkozmuIXnqbrmlrnms5Xlj6rlr7lvdmVyZmxvd+S4umZhbHNl5pe25pyJ5pWIXHJcblxyXG4gICAgLy/ngrnlh7vnoa7lrprmjInpkq7vvIzojrflj5ZjaGVja2JveOmAieaLqeeahOmHjeeCueWMuuWfnyzlubbmt7vliqDliLDkuLvlm77vvIzngrnlh7vph43ngrnljLrln5/lj6/liqjmgIHmm7TmlrDmipjnur/lm75cclxuICAgIGxldCBtYWluTWFwQ29uZmlybUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbk1hcENvbmZpcm1CdG5cIik7XHJcbiAgICBtYWluTWFwQ29uZmlybUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8v5riF56m65LiK5LiA5qyh55qE5Yy65Z+fXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGtleVBvaW50T2JqTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBrZXlQb2ludE9iakxpc3RbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5vdmVyZmxvdyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQubWFya2VyLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL+iOt+WPlmNoZWNrYm946YCJ5oup55qE6YeN54K55Yy65Z+fXHJcbiAgICAgICAga2V5UG9pbnRTZWxlY3RMaXN0ID0gW107XHJcbiAgICAgICAgbGV0IG15Q2hlY2tCb3hUYWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlDaGVja0JveFRhYmxlXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXlDaGVja0JveFRhYmxlLnJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBteUNoZWNrQm94VGFibGUucm93c1tpXS5jZWxscy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBteUNoZWNrQm94VGFibGUucm93c1tpXS5jZWxsc1tqXS5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlQb2ludFNlbGVjdExpc3QucHVzaChlbGVtZW50Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5bCG6YCJ5oup55qE6YeN54K55Yy65Z+f5pi+56S65Zyo5Li75Zu+5LiKXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGtleVBvaW50U2VsZWN0TGlzdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdEtleVBvaW50ID0ga2V5UG9pbnRTZWxlY3RMaXN0W2luZGV4XTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlQb2ludE9iakxpc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RLZXlQb2ludCA9PT0ga2V5UG9pbnRPYmpMaXN0W2pdLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5UG9pbnRPYmpMaXN0W2pdLm92ZXJmbG93ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlQb2ludE9iakxpc3Rbal0ubWFya2VyLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8v54K55Ye75Y+W5raI5oyJ6ZKu77yM5oGi5aSN5Y6f6KGo5qC85pWw5o2uXHJcbiAgICBsZXQgbWFpbk1hcFJlZ3JldEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbk1hcFJlZ3JldEJ0blwiKTtcclxuICAgIG1haW5NYXBSZWdyZXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsZXQgbXlDaGVja0JveFRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUNoZWNrQm94VGFibGVcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBteUNoZWNrQm94VGFibGUucm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG15Q2hlY2tCb3hUYWJsZS5yb3dzW2ldLmNlbGxzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IG15Q2hlY2tCb3hUYWJsZS5yb3dzW2ldLmNlbGxzW2pdLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlQb2ludFNlbGVjdExpc3QuaW5kZXhPZihlbGVtZW50Lm5hbWUpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gc2V0SGlkZU1lbnVCdG4oKSB7XHJcbiAgICAkKFwiI21haW5NYXBTZWxlY3RCdG5cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIjbXltb2RhbFwiKS5tb2RhbCgpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFNoZW5ZYW5nTWFwSnNvbigpIHtcclxuICAgIGZldGNoKFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MC9kYXRhcy5qc29uXCIpXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChnZW9Kc29uKSA9PiB7XHJcbiAgICAgICAgICAgIGVjaGFydHMucmVnaXN0ZXJNYXAoXCJTaGVuWWFuZ1wiLCBnZW9Kc29uKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJnZW9Kc29uIGlzIHJlYWR5XCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgXCIuL2Nzcy9tYWluLmNzc1wiO1xyXG5pbXBvcnQgXCIuL2Nzcy9hbGVydC5jc3NcIjtcclxuaW1wb3J0IFwiLi9jc3MvbGVmdC5jc3NcIjtcclxuaW1wb3J0IFwiLi9jc3MvbWlkZGxlLmNzc1wiO1xyXG5pbXBvcnQgXCIuL2Nzcy9yaWdodC5jc3NcIjtcclxuaW1wb3J0IFwiLi9jc3MvbGliL2hvcm4uY3NzXCI7XHJcbmltcG9ydCBcIi4vY3NzL2xpYi9xdWl0X2J0bi5jc3NcIjtcclxuXHJcbi8v6K6+572u6ZqQ6JeP6I+c5Y2V5pi+56S65oyJ6ZKuXHJcbmltcG9ydCB7IHNldEhpZGVNZW51QnRuIH0gZnJvbSBcIi4vanMvaGlkZU1lbnUvaGlkZU1lbnUuanNcIjtcclxuc2V0SGlkZU1lbnVCdG4oKTtcclxuXHJcbi8v6I635Y+W5rKI6Ziz5Zyw5Zu+anNvbuaVsOaNrlxyXG5pbXBvcnQgeyBnZXRTaGVuWWFuZ01hcEpzb24gfSBmcm9tIFwiLi9qcy9jaGFydHNPcHRpb24vcmVnaXN0ZXJNYXBcIjtcclxuZ2V0U2hlbllhbmdNYXBKc29uKCk7XHJcblxyXG5pbXBvcnQgeyBzZXRNYWluTWFwIH0gZnJvbSBcIi4vanMvbWlkZGxlL21haW5NYXAuanNcIjtcclxuc2V0TWFpbk1hcCgpO1xyXG5cclxuaW1wb3J0IHsgc2V0TWVzc2FnZUZsb3cgfSBmcm9tIFwiLi9qcy9taWRkbGUvbWVzc2FnZUZsb3cuanNcIjtcclxuc2V0TWVzc2FnZUZsb3coKTtcclxuXHJcbmltcG9ydCB7IHNldE1pZ3JhdGlvbk1hcCB9IGZyb20gXCIuL2pzL2xlZnQvbWlncmF0aW9uTWFwLmpzXCI7XHJcbnNldE1pZ3JhdGlvbk1hcCgpO1xyXG5cclxuaW1wb3J0IHsgc2V0VHJpbU51bSB9IGZyb20gXCIuL2pzL2xlZnQvdHJpcE51bS5qc1wiO1xyXG5zZXRUcmltTnVtKCk7XHJcblxyXG5pbXBvcnQgeyBzZXRSZWdpb25TdGF5TnVtIH0gZnJvbSBcIi4vanMvcmlnaHQvcmVnaW9uU3RheU51bS5qc1wiO1xyXG5zZXRSZWdpb25TdGF5TnVtKCk7XHJcblxyXG5pbXBvcnQgeyBzZXRWZWhpY2xlVHlwZSB9IGZyb20gXCIuL2pzL3JpZ2h0L3ZlaGljbGVUeXBlLmpzXCI7XHJcbnNldFZlaGljbGVUeXBlKCk7XHJcbiIsImltcG9ydCB7IGdlb0Nvb3JkTWFwIH0gZnJvbSBcIi4uL2NoYXJ0c09wdGlvbi9nZW9Db29yZE1hcC5qc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE1pZ3JhdGlvbk1hcCgpIHtcclxuICAgIGxldCBtaWdyYXRpb25NYXAgPSBlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaWdyYXRpb25NYXBEaXZcIikpO1xyXG5cclxuICAgIGxldCBhcmVhTmFtZUxpc3QgPSBbXTtcclxuICAgIGdlb0Nvb3JkTWFwLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcclxuICAgICAgICBhcmVhTmFtZUxpc3QucHVzaChpdGVtLm5hbWUpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgZGF0YUxpc3QgPSBbXTtcclxuXHJcbiAgICBhcmVhTmFtZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xyXG4gICAgICAgIGxldCB0ZW1wT2JqID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBpdGVtLFxyXG4gICAgICAgICAgICB2YWx1ZTogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBkYXRhTGlzdC5wdXNoKHRlbXBPYmopO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZmV0Y2goXCJodHRwOi8vMTIyLjUxLjE5LjE2MDo4MDgwL2dldENyb3NzUmVnaW9uVm9sdW1lc1wiKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigob3JpRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhvcmlEYXRhKTtcclxuICAgICAgICAgICAgLy/ljp/mlbDmja7moLzlvI/lpITnkIZcclxuICAgICAgICAgICAgb3JpRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhSXRlbSwgaSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YUxpc3QuZm9yRWFjaChmdW5jdGlvbiAob2JqSXRlbSwgaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW0uc3RhcnRBcmVhID09PSBvYmpJdGVtLm5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW0uc3RhcnRBcmVhICE9PSBkYXRhSXRlbS5lbmRBcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iakl0ZW0udmFsdWUucHVzaChkYXRhSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL+iuvue9rnNlcmllc1xyXG4gICAgICAgICAgICBsZXQgc2VyaWVzID0gW107XHJcbiAgICAgICAgICAgIGRhdGFMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGFydEFyZWFEYXRhID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ2V0Q29vcmQoaXRlbS52YWx1ZVswXS5zdGFydEFyZWEpLmNvbmNhdChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v6LW354K5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZWZmZWN0U2NhdHRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbTogXCJnZW9cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpsZXZlbDogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpcHBsZUVmZmVjdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJydXNoVHlwZTogXCJzdHJva2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IFwie2J9XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAocGFyYW1zLCB0aWNrZXQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IHBhcmFtcy5zZXJpZXNOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJhbXMuZGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCItPlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI8YnIvPuaVsOmHj++8mlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJhcXVhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzdGFydEFyZWFEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+i3r+W+hFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6bGV2ZWw6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2w6IFtcIm5vbmVcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xTaXplOiA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHBhcmFtcywgdGlja2V0LCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyaW9kOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsTGVuZ3RoOiAwLjcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiBcImFycm93XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmVuZXNzOiAwLjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBjb252ZXJ0RGF0YShpdGVtLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/nu4jngrlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJlZmZlY3RTY2F0dGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlU3lzdGVtOiBcImdlb1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgemxldmVsOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlwcGxlRWZmZWN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJ1c2hUeXBlOiBcInN0cm9rZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogXCJ7Yn1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIChwYXJhbXMsIHRpY2tldCwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiZWdpbkFyZWFOYW1lID0gcGFyYW1zLnNlcmllc05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRBcmVhTmFtZSA9IHBhcmFtcy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJhbXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy52YWx1ZVtwYXJhbXMuc2VyaWVzSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luQXJlYU5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCItPlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFyZWFOYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPGJyLz7mlbDph4/vvJpcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCI8c3BhbiBzdHlsZT0nY29sb3I6I2ZmZjsnPlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiPC9zcGFuPjxici8+5pWw5o2u77yaXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xTaXplOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2E2Yzg0Y1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaXRlbS52YWx1ZS5tYXAoZnVuY3Rpb24gKGRhdGFJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YUl0ZW0uZW5kQXJlYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGdldENvb3JkKGRhdGFJdGVtLmVuZEFyZWEpLmNvbmNhdChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhSXRlbS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8v6K6+572udG9vbHRpcOeahHNob3dsaXN0XHJcbiAgICAgICAgICAgIGxldCBzaG93TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICBkYXRhTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS52YWx1ZS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93TGlzdC5wdXNoKGl0ZW0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbWlncmF0aW9uTWFwLnNldE9wdGlvbih7XHJcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogXCJpdGVtXCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZW50OiBcInZlcnRpY2FsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBcImJvdHRvbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IFwicmlnaHRcIixcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBzaG93TGlzdCxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRNb2RlOiBcInNpbmdsZVwiLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdlbzoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogXCJTaGVuWWFuZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjogWzEyMy40MywgNDEuOF0sXHJcbiAgICAgICAgICAgICAgICAgICAgem9vbTogNSxcclxuICAgICAgICAgICAgICAgICAgICByb2FtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjYjdiNmM5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbXBoYXNpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5a+55bqU55qE6byg5qCH5oKs5rWu5pWI5p6cXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNiN2I2YzlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcInJnYmEoMTQ3LCAyMzUsIDI0OCwgMSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAuMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYUNvbG9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJhZGlhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogMC41LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMC41LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcjogMC44LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JTdG9wczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDE3NSwyMzgsMjM4LCAwKVwiLCAvLyAwJSDlpITnmoTpopzoibJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDQ3LDc5LDc5LCAuMSlcIiwgLy8gMTAwJSDlpITnmoTpopzoibJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvb3JkOiBmYWxzZSwgLy8g57y655yB5Li6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNoYWRvd0NvbG9yOiBcInJnYmEoMTI4LCAyMTcsIDI0OCwgMSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hhZG93T2Zmc2V0WDogLTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNoYWRvd09mZnNldFk6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNoYWRvd0JsdXI6IDEwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1waGFzaXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFDb2xvcjogXCJyZ2JhKDQ3LDc5LDc5LCAuMSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAwLjMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8v6YCa6L+H5a2X5YW455Sx5Zyw5Z2A5ZCN5om+5Yiw5Z2Q5qCHXHJcbiAgICBmdW5jdGlvbiBnZXRDb29yZChhcmVhTmFtZSkge1xyXG4gICAgICAgIGxldCBsbmdsYXRMaXN0ID0gW107XHJcbiAgICAgICAgZ2VvQ29vcmRNYXAuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSBhcmVhTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgbG5nbGF0TGlzdC5wdXNoKGl0ZW0ubG5nKTtcclxuICAgICAgICAgICAgICAgIGxuZ2xhdExpc3QucHVzaChpdGVtLmxhdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbG5nbGF0TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0RGF0YShkYXRhKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoZGF0YUl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgbGV0IGZyb21Db29yZCA9IGdldENvb3JkKGRhdGFJdGVtLnN0YXJ0QXJlYSk7XHJcbiAgICAgICAgICAgIGxldCB0b0Nvb3JkID0gZ2V0Q29vcmQoZGF0YUl0ZW0uZW5kQXJlYSk7XHJcbiAgICAgICAgICAgIGlmIChmcm9tQ29vcmQgJiYgdG9Db29yZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21OYW1lOiBkYXRhSXRlbS5zdGFydEFyZWEsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9OYW1lOiBkYXRhSXRlbS5lbmRBcmVhLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkczogW2Zyb21Db29yZCwgdG9Db29yZF0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbWlncmF0aW9uTWFwLnJlc2l6ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2VvQ29vcmRNYXAgfSBmcm9tIFwiLi4vY2hhcnRzT3B0aW9uL2dlb0Nvb3JkTWFwLmpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJpbU51bSgpIHtcclxuICAgIGxldCBzdGF0ZVNlbGVjdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdGVTZWxlY3RCdXR0b25cIik7XHJcbiAgICBsZXQgdHJpcE51bVRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cmlwTnVtVGl0bGVcIik7XHJcbiAgICBsZXQgdHJpcE51bURpdkJ5VGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJpcE51bURpdkJ5VGltZVwiKTtcclxuICAgIGxldCB0cmlwTnVtRGl2QnlTcGFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJpcE51bURpdkJ5U3BhY2VcIik7XHJcblxyXG4gICAgc3RhdGVTZWxlY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoc3RhdGVTZWxlY3RCdXR0b24uaW5uZXJUZXh0ID09PSBcIuWIh+aNouS4uuWMuuWfn+WIhuW4g1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5YiH5o2i5Li65Yy65Z+f5YiG5biDXCIpO1xyXG4gICAgICAgICAgICB0cmlwTnVtVGl0bGUuaW5uZXJUZXh0ID0gXCLlkITljLrln5/kurrlj6Plh7rooYzph4/liIbmnpBcIjtcclxuICAgICAgICAgICAgc3RhdGVTZWxlY3RCdXR0b24uaW5uZXJUZXh0ID0gXCLliIfmjaLkuLrml7bpl7TliIbluINcIjtcclxuICAgICAgICAgICAgdHJpcE51bURpdkJ5VGltZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRyaXBOdW1EaXZCeVNwYWNlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIHNldENoYXJ0QnlTcGFjZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyaXBOdW1UaXRsZS5pbm5lclRleHQgPSBcIuWQhOaXtumXtOS6uuWPo+WHuuihjOmHj+WIhuaekFwiO1xyXG4gICAgICAgICAgICBzdGF0ZVNlbGVjdEJ1dHRvbi5pbm5lclRleHQgPSBcIuWIh+aNouS4uuWMuuWfn+WIhuW4g1wiO1xyXG4gICAgICAgICAgICB0cmlwTnVtRGl2QnlTcGFjZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRyaXBOdW1EaXZCeVRpbWUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgc2V0Q2hhcnRCeVRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzZXRDaGFydEJ5VGltZSgpO1xyXG4gICAgLy8gc2V0Q2hhcnRCeVNwYWNlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0Q2hhcnRCeVRpbWUoKSB7XHJcbiAgICAgICAgZmV0Y2goXCJodHRwOi8vMTIyLjUxLjE5LjE2MDo4MDgwL2dldFRyYXZlbFRpbWVWb2x1bWVzXCIpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0cmlwTnVtID0gZWNoYXJ0cy5pbml0KFxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJpcE51bURpdkJ5VGltZVwiKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRyaXBOdW0uc2V0T3B0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IFwiYXhpc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeEF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0aW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0xhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjZmZmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMTJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB5QXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzTGFiZWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBcInRpbWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVpvb206IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnNpZGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBcInRpbWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiZGF0YVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlwTnVtLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRDaGFydEJ5U3BhY2UoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gbWFrZU1hcERhdGEocmF3RGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgcmVEYXRhID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25lUmF3RGF0YSA9IHJhd0RhdGFbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdlb0Nvb3JkTWFwLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGljdE9iaiA9IGdlb0Nvb3JkTWFwW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWN0T2JqLm5hbWUgPT09IG9uZVJhd0RhdGEuYXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZURhdGEucHVzaChvbmVSYXdEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8v5pWw5o2u5LuO6auY5Yiw5L2O5o6S5bqPXHJcbiAgICAgICAgICAgIHJlRGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYi5kYXRhIC0gYS5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVEYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlRGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZldGNoKFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MC9nZXRUcmF2ZWxBcmVhVm9sdW1lc1wiKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHJpcE51bSA9IGVjaGFydHMuaW5pdChcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRyaXBOdW1EaXZCeVNwYWNlXCIpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlRGF0YSA9IG1ha2VNYXBEYXRhKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdHJpcE51bS5zZXRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogXCJheGlzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB4QXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNhdGVnb3J5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNMYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHlBeGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNMYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFab29tOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5zaWRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHJlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInBpY3RvcmlhbEJhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFyQ2F0ZWdvcnlHYXA6IFwiMCVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiYXJlYVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiZGF0YVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhdGg6Ly9NMCwxMCBMMTAsMTAgQzUuNSwxMCA1LjUsNSA1LDAgQzQuNSw1IDQuNSwxMCAwLDEwIHpcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogMTUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiYXF1YW1hcmluZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTI6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvclN0b3BzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIm9yYW5nZXJlZFwiLCAvLyAg6aG26YOo6aKc6ImyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwic2FsbW9uXCIsIC8vICDlupXpg6jpopzoibJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbDogZmFsc2UsIC8vICDnvLrnnIHkuLogIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbXBoYXNpczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgejogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaXBOdW0ucmVzaXplKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNldFJlZ2lvblN0YXlOdW0oKSB7XHJcbiAgICBsZXQgcmVnaW9uU3RheU51bSA9IGVjaGFydHMuaW5pdChcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ2lvblN0YXlOdW1EaXZcIilcclxuICAgICk7XHJcbiAgICByZWdpb25TdGF5TnVtLnNldE9wdGlvbih7XHJcbiAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAvL+mlvOWbvuOAgeS7quihqOebmOOAgea8j+aWl+Wbvjoge2F977yI57O75YiX5ZCN56ew77yJ77yMe2J977yI5pWw5o2u6aG55ZCN56ew77yJ77yMe2N977yI5pWw5YC877yJLCB7ZH3vvIjnmb7liIbmr5TvvIlcclxuICAgICAgICAgICAgLy8gdHJpZ2dlcjogXCJpdGVtXCIsXHJcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHBhcmFtcywgdGlja2V0LCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBwYXJhbXMubmFtZTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcmFtcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lICsgXCI8YnIvPuaVsOmHj++8mlwiICsgdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcm9zZVR5cGU6IFwiYW5nbGVcIiwgLy/orr7nva7miJDljZfkuIHmoLzlsJTlm75cclxuICAgICAgICB0ZXh0U3R5bGU6IHtcclxuICAgICAgICAgICAgLy/lkITmiYflvaLlnZfnmoTlkI3lrZfmlofmnKzpopzoibLnu5/kuIBcclxuICAgICAgICAgICAgY29sb3I6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbExpbmU6IHtcclxuICAgICAgICAgICAgLy/ov57nur/popzoibLnu5/kuIBcclxuICAgICAgICAgICAgbGluZVN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNilcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1TdHlsZToge1xyXG4gICAgICAgICAgICBjb2xvcjogXCJkb2RnZXJibHVlXCIsXHJcbiAgICAgICAgICAgIHNoYWRvd0JsdXI6IDIwMCxcclxuICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjUpXCIsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdmlzdWFsTWFwOiB7XHJcbiAgICAgICAgICAgIC8vIOS4jeaYvuekuiB2aXN1YWxNYXAg57uE5Lu277yM5Y+q55So5LqO5piO5pqX5bqm55qE5pig5bCEXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAvLyDmmKDlsITnmoTmnIDlsI/lgLzkuLogODBcclxuICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgLy8g5pig5bCE55qE5pyA5aSn5YC85Li6IDYwMFxyXG4gICAgICAgICAgICBtYXg6IDMwMCxcclxuICAgICAgICAgICAgaW5SYW5nZToge1xyXG4gICAgICAgICAgICAgICAgLy8g5piO5pqX5bqm55qE6IyD5Zu05pivIDAg5YiwIDFcclxuICAgICAgICAgICAgICAgIGNvbG9yTGlnaHRuZXNzOiBbMC45LCAwLjNdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIC8v5qih5ouf5pWw5o2uXHJcbiAgICAvLyBkYXRhTGlzdCA9IFtcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6IFwiMeWMulwiLFxyXG4gICAgLy8gICAgICAgICB2YWx1ZTogMzAwMCxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbmFtZTogXCIy5Yy6XCIsXHJcbiAgICAvLyAgICAgICAgIHZhbHVlOiA0MDAsXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6IFwiM+WMulwiLFxyXG4gICAgLy8gICAgICAgICB2YWx1ZTogMjAwLFxyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBuYW1lOiBcIjTljLpcIixcclxuICAgIC8vICAgICAgICAgdmFsdWU6IDYwMCxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbmFtZTogXCI15Yy6XCIsXHJcbiAgICAvLyAgICAgICAgIHZhbHVlOiA3MDAsXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6IFwiNuWMulwiLFxyXG4gICAgLy8gICAgICAgICB2YWx1ZTogODAwLFxyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBuYW1lOiBcIjfljLpcIixcclxuICAgIC8vICAgICAgICAgdmFsdWU6IDkwMCxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbmFtZTogXCI45Yy6XCIsXHJcbiAgICAvLyAgICAgICAgIHZhbHVlOiAxMDAwLFxyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBuYW1lOiBcIjnljLpcIixcclxuICAgIC8vICAgICAgICAgdmFsdWU6IDExMDAsXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6IFwiMTDljLpcIixcclxuICAgIC8vICAgICAgICAgdmFsdWU6IDEyMDAsXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vIF07XHJcblxyXG4gICAgLy/ku47mnI3liqHlmajojrflj5bmlbDmja5cclxuICAgIGZldGNoKFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MC9nZXRBcmVhU3RheVZvbHVtZXNcIilcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2V0UmVnaW9uU3RheU51bVwiKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgIGRhdGEgPSBnZXRUb3BOQXJlYShkYXRhLCA2KTtcclxuICAgICAgICAgICAgcmVnaW9uU3RheU51bS5zZXRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgc2VyaWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLljLrkurrlj6Plr4bluqZcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInBpZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogXCI1MCVcIixcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlZ2lvblN0YXlOdW0ucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGdldFRvcE5BcmVhKGRhdGFMaXN0LCBOKSB7XHJcbiAgICAgICAgbGV0IHNob3dMaXN0ID0gW107XHJcbiAgICAgICAgbGV0IHNob3dMZW5ndGggPSBOO1xyXG4gICAgICAgIGRhdGFMaXN0ID0gZGF0YUxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYi52YWx1ZSAtIGEudmFsdWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8v5bCG5o6S5ZCN5YmNc2hvd0xlbmd0aOeahOWcsOWMuuWKoOWFpeWxleekumxpc3RcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2hvd0xlbmd0aCAtIDE7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFMaXN0W2luZGV4XTtcclxuICAgICAgICAgICAgc2hvd0xpc3QucHVzaChkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5bCG5Ymp5L2Z55qE5Zyw5Yy65Yqg5YWl4oCc5YW25LuW4oCd5Zyw5Yy6XHJcbiAgICAgICAgbGV0IHZhbHVlU3VtID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHNob3dMZW5ndGggLSAxOyBpbmRleCA8IGRhdGFMaXN0Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YWx1ZVN1bSArPSBkYXRhTGlzdFtpbmRleF0udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBvdGhlckFyZWEgPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgb3RoZXJBcmVhLm5hbWUgPSBcIuWFtuS7luWcsOWMulwiO1xyXG4gICAgICAgIG90aGVyQXJlYS52YWx1ZSA9IHZhbHVlU3VtO1xyXG4gICAgICAgIHNob3dMaXN0LnB1c2gob3RoZXJBcmVhKTtcclxuICAgICAgICByZXR1cm4gc2hvd0xpc3Q7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNldFZlaGljbGVUeXBlKCkge1xyXG4gICAgY29uc3QgYXJlYVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXJlYVNlbGVjdFwiKTtcclxuICAgIGFyZWFTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGFyZWFPcHRpb24gPSBhcmVhU2VsZWN0LnZhbHVlO1xyXG4gICAgICAgIHNldFZlaGljbGVUeXBlKGFyZWFPcHRpb24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IGFyZWFPcHRpb24gPSBhcmVhU2VsZWN0LnZhbHVlO1xyXG4gICAgc2V0VmVoaWNsZVR5cGUoYXJlYU9wdGlvbik7XHJcbiAgICBmdW5jdGlvbiBzZXRWZWhpY2xlVHlwZShhcmVhT3B0aW9uKSB7XHJcbiAgICAgICAgZmV0Y2goXHJcbiAgICAgICAgICAgIFwiaHR0cDovLzEyMi41MS4xOS4xNjA6ODA4MC9nZXRUcmF2ZWxXYXlWb2x1bWVCeUFyZWE/YXJlYT1cIiArXHJcbiAgICAgICAgICAgICAgICBhcmVhT3B0aW9uXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmVoaWNsZVR5cGUgPSBlY2hhcnRzLmluaXQoXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZWhpY2xlVHlwZURpdlwiKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogXCJheGlzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHhBeGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2F0ZWdvcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0xhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeUF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0xhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aDogNDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBcIndheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiZGF0YVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IGVjaGFydHMuZ3JhcGhpYy5MaW5lYXJHcmFkaWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNGRjlBMjJcIiwgLy8gMCUg5aSE55qE6aKc6ImyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI0ZGRDU2RVwiLCAvLyAxMDAlIOWkhOeahOminOiJslxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFyQm9yZGVyUmFkaXVzOiBbMzAsIDMwLCAwLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwidHVycXVvaXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmVoaWNsZVR5cGUuc2V0T3B0aW9uKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlaGljbGVUeXBlLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9